'\" t
.\"___INFO__MARK_BEGIN__
.\"
.\" Copyright: 2004 by Sun Microsystems, Inc.
.\"
.\" Portions of this software are Copyright (c) 2012-2016 Univa Corporation
.\"
.\"___INFO__MARK_END__
.\"
.\" Some handy macro definitions [from Tom Christensen's man(1) manual page].
.\"
.de SB		\" small and bold
.if !"\\$1"" \\s-2\\fB\&\\$1\\s0\\fR\\$2 \\$3 \\$4 \\$5
..
.\"
.de T		\" switch to typewriter font
.ft CW		\" probably want CW if you don't have TA font
..
.\"
.de TY		\" put $1 in typewriter font
.if t .T
.if n ``\c
\\$1\c
.if t .ft P
.if n \&''\c
\\$2
..
.\"
.de M		\" man page reference
\\fI\\$1\\fR\\|(\\$2)\\$3
..
.TH SGE_CONF 5 "UGE 8.4.4" "Univa Grid Engine File Formats"
.\"
.SH NAME
sge_conf \- Univa Grid Engine configuration files
.\"
.\"
.SH DESCRIPTION
.I sge_conf
defines the global and local Univa Grid Engine configurations and can be
shown/modified by
.M qconf 1
using the \-sconf/\-mconf options. Only root or the cluster administrator may
modify
.I sge_conf.
.PP
At its initial start-up,
.M sge_qmaster 8
checks to see if a valid Univa Grid Engine configuration is available at a
well known location in the Univa Grid Engine internal directory hierarchy.
If so, it loads that configuration information and proceeds.
If not,
.M sge_qmaster 8
writes a generic configuration containing default values to that same
location.
The Univa Grid Engine execution daemons
.M sge_execd 8
upon start-up retrieve their configuration from
.M sge_qmaster 8 .
.PP
The actual configuration for both
.M sge_qmaster 8
and
.M sge_execd 8
is a superposition of a \fIglobal\fP configuration and
a \fIlocal\fP configuration pertinent for the host on which
a master or execution daemon resides.
If a local configuration is available, its entries overwrite the
corresponding entries of the global configuration. \fBNote:\fP The local
configuration does not have to contain all valid configuration entries,
but only those which need to be modified against the global entries.
.PP
Note: Univa Grid Engine allows backslashes (\\) be used to escape newline
(\\newline) characters. The backslash and the newline are replaced with a
space (" ") character before any interpretation.
.\"
.\"
.SH FORMAT
.\"
The paragraphs that follow provide brief descriptions of the individual
parameters that compose the global and local configurations for a
Univa Grid Engine cluster:
.\"
.\"
.SS "\fBexecd_spool_dir\fP"
The execution daemon spool directory path. Again, a feasible spool
directory requires read/write access permission for root. The entry in
the global configuration for this parameter can be overwritten by
execution host local configurations, i.e. each
.M sge_execd 8
may have a private spool directory with a different path, in which case
it needs to provide read/write permission for the root account of the
corresponding execution host only.
.PP
Under \fBexecd_spool_dir\fP a directory named corresponding
to the unqualified hostname of the execution host is opened and
contains all information spooled to disk. Thus, it is possible for the
\fBexecd_spool_dir\fPs of all execution hosts to physically reference the
same directory path
(the root access restrictions mentioned above need to be met, however).
.PP
Changing the global \fBexecd_spool_dir\fP
parameter set at installation time is not supported
in a running system. If the change should still be done
it is required to restart all affected execution daemons.  Please make sure running 
jobs have finished before doing so,
otherwise running jobs will be lost. 

.PP
The default location for the execution daemon spool
directory is $SGE_ROOT/$SGE_CELL/spool.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBmailer\fP"
\fBmailer\fP is the absolute pathname to the electronic mail delivery
agent on your system. It must accept the following syntax:
.PP
.RS
mailer -s <subject-of-mail-message> <recipient>
.RE
.PP
Each
.M sge_execd 8
may use a private mail agent. Changing \fBmailer\fP will take
immediate effect.
.PP
The default for \fBmailer\fP depends on the operating system of
the host on which the Univa Grid Engine master installation was run. Common
values are /bin/mail or /usr/bin/Mail.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBxterm\fP"
.B xterm
is the absolute pathname to the X Window System terminal emulator,
.M xterm 1 .
.PP
Changing \fBxterm\fP will take immediate effect.
.PP
The default for \fBxterm\fP is /usr/bin/X11/xterm.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBload_sensor\fP"
A comma separated list of executable shell script paths or programs
to be started by
.M sge_execd 8
and to be used in order to retrieve site configurable load information
(e.g. free space on a certain disk partition).
.PP
Each
.M sge_execd 8
may use a set of private 
.B load_sensor
programs or scripts. Changing
.B load_sensor
will take effect after two load report intervals (see
\fBload_report_time\fB). A load sensor will be restarted automatically if
the file modification time of the load sensor executable changes.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.PP
In addition to the load sensors configured via
\fBload_sensor\fP,
.M sge_exec 8
searches for an executable file named
.I qloadsensor
in the execution host's Univa Grid Engine binary directory path.
If such a file is found, it is treated like the configurable load sensors
defined in \fBload_sensor\fP. This facility is intended for pre-installing
a default load sensor.
.\"
.\"
.SS "\fBprolog\fP"
The executable path of a shell script that is started before execution
of Univa Grid Engine jobs with the same environment setting as that for the
Univa Grid Engine
jobs to be started afterwards. 
An optional prefix "user@" specifies the user under which this procedure
is to be started. The procedures standard
output and the error output stream are written to the same file used also for
the standard output and error output of each job.
This procedure is intended as a means
for the Univa Grid Engine administrator to automate the execution of general site
specific tasks like the preparation of temporary file systems with the
need for the same context information as the job.
Each
.M sge_execd 8
may use a private prolog script. 
Correspondingly, the execution host local 
configurations is can be overwritten by the queue configuration (see
.M queue_conf 5
). 
Changing \fBprolog\fP will take
immediate effect.
.PP
The default for \fBprolog\fP is the special value NONE, which prevents
from execution of a prolog script. 
.PP
Scripts where the execution duration would exceed 2 minutes will be 
terminated. This timeout can be adjusted by defining \fBSCRIPT_TIMEOUT\fP
as \fBexecd_params\fP.
.PP
The following special
variables expanded at runtime can be used (besides any other
strings which have to be interpreted by the procedure) to constitute 
a command line:
.IP "\fI$host\fP"
The name of the host on which the prolog or epilog procedures are
started.
.IP "\fI$job_owner\fP"
The user name of the job owner.
.IP "\fI$job_id\fP"
Univa Grid Engine's unique job identification number.
.IP "\fI$job_name\fP"
The name of the job.
.IP "\fI$processors\fP"
The \fBprocessors\fP string as contained in the queue configuration
(see
.M queue_conf 5 )
of the master queue (the queue in which the prolog and epilog procedures
are started).
.IP "\fI$queue\fP"
The cluster queue name of the master queue instance, i.e. the cluster 
queue in which the prolog and epilog procedures are started.
.IP "\fI$stdin_path\fP"
The pathname of the stdin file. This is always /dev/null for prolog, 
pe_start, pe_stop and epilog. It is the pathname of the
stdin file for the job in the job script. When delegated file staging is enabled, 
this path is set
to $fs_stdin_tmp_path. When delegated file staging is not enabled, it is the stdin
pathname given via DRMAA or qsub.
.IP "\fI$stdout_path\fP"
.IP "\fI$stderr_path\fP"
The pathname of the stdout/stderr file. This always points to the
output/error file. When delegated file staging is enabled, this path is set to
$fs_stdout_tmp_path/$fs_stderr_tmp_path. When delegated file staging is not
enabled, it is the stdout/stderr pathname given via DRMAA or qsub.
.IP "\fI$merge_stderr\fP"
If merging of stderr and stdout is requested, this flag is "1", otherwise it is "0".
If this flag is 1, stdout and stderr are merged in one file, the stdout file.
Merging of stderr and stdout can be requested via the DRMAA job template attribute 'drmaa_join_files' (see
.M drmaa_attributes 3 
) or the qsub parameter '-j y' (see
.M qsub 1 
).
.IP "\fI$fs_stdin_host\fP"
When delegated file staging is requested for the stdin file, this is the name of
the host where the stdin file has to be copied from before the job is started.
.IP "\fI$fs_stdout_host\fP"
.IP "\fI$fs_stderr_host\fP"
When delegated file staging is requested for the stdout/stderr file, this is the
name of the host where the stdout/stderr file has to be copied to after the job has run.
.IP "\fI$fs_stdin_path\fP"
When delegated file staging is requested for the stdin file, this is the pathname
of the stdin file on the host $fs_stdin_host.
.IP "\fI$fs_stdout_path\fP"
.IP "\fI$fs_stderr_path\fP"
When delegated file staging is requested for the stdout/stderr file, this is the
pathname of the stdout/stderr file on the host $fs_stdout_host/$fs_stderr_host.
.IP "\fI$fs_stdin_tmp_path\fP"
When delegated file staging is requested for the stdin file, this is the destination
pathname of the stdin file on the execution host. The prolog script must copy the
stdin file from $fs_stdin_host:$fs_stdin_path to localhost:$fs_stdin_tmp_path to
establish delegated file staging of the stdin file.
.IP "\fI$fs_stdout_tmp_path\fP"
.IP "\fI$fs_stderr_tmp_path\fP"
When delegated file staging is requested for the stdout/stderr file, this is the 
source pathname of the stdout/stderr file on the execution host. The epilog script 
must copy the stdout file from localhost:$fs_stdout_tmp_path to 
$fs_stdout_host:$fs_stdout_path (the stderr file from localhost:$fs_stderr_tmp_path 
to $fs_stderr_host:$fs_stderr_path) to establish delegated file staging of the 
stdout/stderr file.
.IP "\fI$fs_stdin_file_staging\fP"
.IP "\fI$fs_stdout_file_staging\fP"
.IP "\fI$fs_stderr_file_staging\fP"
When delegated file staging is requested for the stdin/stdout/stderr file, the flag
is set to "1", otherwise it is set to "0" (see in \fBdelegated_file_staging\fP how 
to enable delegated file staging).
 
These three flags correspond to the DRMAA job template attribute 'drmaa_transfer_files' (see 
.M drmaa_attributes 3
).
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.PP
Exit codes for the prolog attribute can be interpreted based on the 
following exit values:
.RS
0: Success 
.br
99: Reschedule job 
.br
100: Put job in error state 
.br
Anything else: Put queue in error state
.RE
.\"
.\"
.SS "\fBepilog\fP"
The executable path of a shell script that is started after execution
of Univa Grid Engine jobs with the same environment setting as that for the
Univa Grid Engine
jobs that has just completed. An optional prefix "user@" specifies the 
user under which this procedure is to be started. The procedures standard
output and the error output stream are written to the same file used also for
the standard output and error output of each job.
This procedure is intended as a means
for the Univa Grid Engine administrator to automate the execution of general site
specific tasks like the cleaning up of temporary file systems with the
need for the same context information as the job.
Each
.M sge_execd 8
may use a private epilog script. 
Correspondingly, the execution host local 
configurations is can be overwritten by the queue configuration (see
.M queue_conf 5
).
Changing \fBepilog\fP will take
immediate effect.
.PP
The default for \fBepilog\fP is the special value NONE, which prevents
from execution of a epilog script.
The  same  special variables as for \fBprolog\fP can be
used to constitute a command line.
.PP
Scripts where the execution duration would exceed 2 minutes will be 
terminated. This timeout can be adjusted by defining \fBSCRIPT_TIMEOUT\fP
as \fBexecd_params\fP.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.PP
Exit codes for the epilog attribute can be interpreted based on the 
following exit values:
.RS
0: Success 
.br
99: Reschedule job 
.br
100: Put job in error state 
.br
Any other value <= 127: Put queue in error state, requeue the job
.br
Any value > 127: If \fBRESCHEDULE_ON_KILLED_EPILOG\fP is set to "true" or
"1", the queue is put in error state, the job is requeued. If this parameter is set to "false" or
"0", the job simply finishes.
.RE
.\"
.\"
.SS "\fBshell_start_mode\fP"
.B Note:
Deprecated, may be removed in future release.
.br
This parameter defines the mechanisms which are used to actually
invoke the job scripts on the execution hosts. The following
values are recognized:
.IP \fIunix_behavior\fP
If a user starts a job shell script under UNIX interactively by
invoking it just with the script name the operating system's executable
loader uses the information provided in a comment such as `#!/bin/csh' in
the first line of the script to detect which command interpreter to
start to interpret the script. This mechanism is used by Univa Grid Engine when
starting jobs if \fIunix_behavior\fP is defined as \fBshell_start_mode\fP.
.\"
.IP \fIposix_compliant\fP
POSIX does not consider first script line comments such a `#!/bin/csh'
as significant. The POSIX standard for batch queuing systems
(P1003.2d) therefore requires a compliant queuing system to ignore
such lines but to use user specified or configured default command
interpreters instead. Thus, if \fBshell_start_mode\fP is set to
\fIposix_compliant\fP Univa Grid Engine will either use the command interpreter
indicated by the \fB\-S\fP option of the
.M qsub 1
command or the \fBshell\fP parameter of the queue to be used (see
.M queue_conf 5
for details).
.\"
.IP \fIscript_from_stdin\fP
Setting the \fBshell_start_mode\fP parameter either to \fIposix_compliant\fP
or \fIunix_behavior\fP requires you to set the umask in use for
.M sge_execd 8
such that every user has read access to the active_jobs directory in the
spool directory of the corresponding execution daemon. In case you have
\fBprolog\fP and \fBepilog\fP scripts configured, they also need to be
readable by any user who may execute jobs.
.br
If this violates your
site's security policies you may want to set \fBshell_start_mode\fP
to \fIscript_from_stdin\fP. This will force Univa Grid Engine to open the
job script as well as the epilog and prolog scripts for reading into
STDIN as root (if
.M sge_execd 8
was started as root) before changing to the job owner's user account.
The script is then fed into the STDIN stream of the command interpreter
indicated by the \fB\-S\fP option of the
.M qsub 1
command or the \fBshell\fP parameter of the queue to be used (see
.M queue_conf 5
for details).
.br
Thus setting \fBshell_start_mode\fP to \fIscript_from_stdin\fP also
implies \fIposix_compliant\fP behavior. \fBNote\fP, however, that
feeding scripts into the STDIN stream of a command interpreter may
cause trouble if commands like
.M rsh 1
are invoked inside a job script as they also process the STDIN
stream of the command interpreter. These problems can usually be
resolved by redirecting the STDIN channel of those commands to come
from /dev/null (e.g. rsh host date < /dev/null). \fBNote also\fP, that any
command-line options associated with the job are passed to the executing
shell. The shell will only forward them to the job if they are not
recognized as valid shell options.
.PP
Changes to \fBshell_start_mode\fP will take immediate effect.
The default for \fBshell_start_mode\fP is \fIunix_behavior\fP.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBlogin_shells\fP"
UNIX command interpreters like the Bourne-Shell (see
.M sh 1 )
or the C-Shell (see
.M csh 1 )
can be used by Univa Grid Engine to start job scripts. The command interpreters
can either be started as login-shells (i.e. all system and user default
resource files like .login or .profile will be executed when the
command interpreter is started and the environment for the job will be
set up as if the user has just logged in) or just for command execution
(i.e. only shell specific resource files like .cshrc will be executed
and a minimal default environment is set up by Univa Grid Engine \- see
.M qsub 1 ).
The parameter \fBlogin_shells\fP contains a comma separated list of the
executable names of the command interpreters to be started as login-shells.
Shells in this list are only started as login shells if the parameter
\fBshell_start_mode\fP (see above) is set to \fIposix_compliant\fP.
.PP
Changes to \fBlogin_shells\fP will take immediate effect.
The default for \fBlogin_shells\fP is sh,bash,csh,tcsh,ksh.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBmin_uid\fP"
\fBmin_uid\fP places a lower bound on user IDs that may use the cluster. Users
whose user ID (as returned by
.M getpwnam 3 )
is less than \fBmin_uid\fP will not be allowed to run jobs on the cluster.
.PP
Changes to \fBmin_uid\fP will take immediate effect.
The default for \fBmin_uid\fP is 0.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBmin_gid\fP"
This parameter sets the lower bound on group IDs that may use the cluster.
Users whose default group ID (as returned by
.M getpwnam 3 )
is less than \fBmin_gid\fP will not be allowed to run jobs on the cluster.
.PP
Changes to \fBmin_gid\fP will take immediate effect.
The default for \fBmin_gid\fP is 0.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBuser_lists \fP"
The \fBuser_lists\fP parameter contains a comma separated list of 
user access lists as described in
.M access_list 5 .
Each user contained in at least one of the enlisted access lists has
access to the cluster. If the \fBuser_lists\fP parameter is set to
NONE (the default) any user has access not explicitly excluded
via the \fBxuser_lists\fP parameter described below.
If a user is contained both in an access list enlisted in \fBxuser_lists\fP
and \fBuser_lists\fP the user is denied access to the cluster.
.PP
Changes to \fBuser_lists\fP will take immediate effect
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBxuser_lists \fP"
The \fBxuser_lists\fP parameter contains a comma separated list of 
user access lists as described in
.M access_list 5 .
Each user contained in at least one of the enlisted access lists is denied
access to the cluster. If the \fBxuser_lists\fP parameter is set to
NONE (the default) any user has access.
If a user is contained both in an access list enlisted in \fBxuser_lists\fP
and \fBuser_lists\fP (see above) the user is denied access to the cluster.
.PP
Changes to \fBxuser_lists\fP will take immediate effect
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBadministrator_mail\fP"
\fBadministrator_mail\fP specifies a comma separated list of the
electronic mail address(es) of the cluster administrator(s) to whom
internally-generated problem reports are sent. The mail address format
depends on your electronic mail system and how it is configured;
consult your system's configuration guide for more information.
.PP
Changing \fBadministrator_mail\fP takes immediate effect.
The default for \fBadministrator_mail\fP is an empty mail list.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBprojects\fP"
The \fBprojects\fP list contains all projects which a job can be submitted
to or pending jobs can be altered to. If the \fBprojects\fP list is defined,
only jobs which are submitted or altered to one of these projects are accepted
by Univa Grid Engine, all other jobs are rejected. If the \fBprojects\fP list is
not defined (i.e. it is "none"), jobs are not rejected because of their project
membership.
.PP
Changing \fBprojects\fP takes immediate effect. Changing \fBprojects\fP
doesn't affect pending or running jobs, except for altering them. The default
for \fBprojects\fP is none.
.PP
This value is a global configuration parameter only. It cannot be overwritten
by the execution host local configuration.
.\"
.\"
.SS "\fBxprojects\fP"
The \fBxprojects\fP list contains all projects which a job can not be submitted
to or pending job can not be altered to. If the \fBxprojects\fP list is defined,
all jobs that are submitted or altered to one of these projects are rejected by
Univa Grid Engine, all other jobs are not rejected. If the \fBxprojects\fP list is
not defined (i.e. it is "none"), jobs are not rejected because of the project
membership.
.PP
Changing \fBxprojects\fP takes immediate effect. Changing \fBxprojects\fP doesn't
affect pending or running jobs, except for altering them. The default for
\fBxprojects\fP is none.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBload_report_time\fP"
System load is reported periodically by the execution daemons to
.M sge_qmaster 8 .
The parameter \fBload_report_time\fP defines the time interval between load
reports.
.PP
Each
.M sge_execd 8
may use a different load report time. Changing \fBload_report_time\fP will
take immediate effect.
.PP
\fBNote:\fP Be careful
when modifying \fBload_report_time\fP. Reporting load too frequently
might block
.M sge_qmaster 8
especially if the number of execution hosts is large. Moreover, since the
system load typically increases and decreases smoothly, frequent load
reports hardly offer any benefit.
.PP
The default for \fBload_report_time\fP is 40 seconds.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.\"
.\"
.PP
.SS "\fBgdi_request_limits\fp
This parameter can be used to define a maximum number of requests per 
second that 
.M sge_qmaster 1
will accept before it starts rejecting incoming requests. The value 
\fINONE\fP, which is the default for this parameter, means that all 
valid requests that will be received by the 
.M sge_qmaster 1 
process will also be answered. Incoming requests that can not 
immediately be answered will be stored in request queues till a 
thread is available to handle the request and send a response to 
the client.
.PP
Instead of \fINONE\fP a comma separated list of limit rules can be 
specified. A limit rule consist of a set of filters and a number 
that expresses how many requests per second are allowed for those 
requests that match the corresponding filters. There are filters 
for the request source (name of the command line client), 
request type (ADD, MOD, DEL, GET), object type that should be 
addressed by the request (e.g. JOB, CLUSTER_QUEUE, JOB_CLASS, ...), 
users that triggered the request (user name) and the hostname of the 
host where the request is coming from. For each part of such a filter 
expression it is allowed to specify "*" so that the corresponding part 
of that expression will match any incoming request.
.PP
The full syntax for this parameter is as follows:
.PP
.nf
gdi_request_limits ::= 
   "NONE" | limit_rule [ "," limit_rule ]* .
limit_rule ::= 
   source ":" request_type ":" obj_type ":" user 
   "=" max_requests .
source ::= 
   "*" | "drmaa" | "qacct" | "qalter" | "qsub" | "qsh" | "qlogin" |
   "qrsh" | "qconf" | "qdel" | "qhost" | "qmod" | "qquota" |
   "qmon" | "qrdel" | "qrstat" | "qrsub" | "qselect" | "qstat" .
request_type ::= 
   "*" | "ADD" | "MOD" | "DEL" | "GET" .
obj_type ::= 
   "*" | "JOB" | "ADMIN_HOST" | "SUBMIT_HOST" | "EXEC_HOST" | 
   "CLUSTER_QUEUE" | "CPLX_ENTRY" | "CONFIG" | "MANAGER" | 
   "OPERATOR" | "PARALLEL_ENV" | "SCHED_CONFIG" | "USER" | 
   "USER_SET" | "PROJECT" | "SHARETREE_NODE" | "CKPT_ENV" |
   "CALENDAR" | "HOST_GROUP" | "RESOURCE_QUOTA" | 
   "ADVANCE_RESERVATION" | "RESOURCE_RESERVATION" | "JOB_CLASS" |
   "SESSION" | "CLUSTER" | "LICENSE_MANAGER" . 
user ::= "*" | <<user_name>> .
hostname ::= "*" | <<hostname>> .
max_requests ::= <<value_>=_1>> .
.fi
.PP
If multiple limit rules are defined then all of them are taken 
into account, i.e. none of the maximum values defined in those 
rules is allowed to be exceeded. Requests that are not accepted 
will be rejected with an error message that shows the first 
limit rule that rejected the request. Limit rules will be tested 
in the order in that they appear.
.PP
.nf
Example: qsub:ADD:JOB:peter:*=400,qstat:GET:JOB:*:*=400,
         qstat:GET:JOB:*:poipu=10
.fi
.PP
The example above will limit the number of job submissions (done via 
.M qsub 1 
for the user named peter to a maximum of 400 submits per second.
.PP
The second and third limit rule limits the number of qstat job-get 
requests for all users on all hosts to 400 and to 10 for such 
requests that are received from the host poipu. This means 
.M qstat 1 
commands that will show job related information (like \fBqstat -f, 
qstat -j, qstat -ext,\fP ...) might get rejected if those limits 
get exceeded. Also commands might get rejected that do not show 
jobs directly but that require job information to generate the 
output (like \fBqstat -gc\fP -> which shows the used job slots of queues). 
.PP
\fBgdi_request_limit\fP replaces the functionality provided by 
\fBgdi_multi_read_req\fP. \fBgdi_multi_read_req\fP is deprecated 
since Univa Grid Engine 8.2.
.\"
.\"
.SS "\fBreschedule_unknown\fP"
Determines whether jobs on hosts in unknown state
are rescheduled and thus sent to other hosts. Hosts
are registered as unknown if
.M sge_master 8
cannot establish contact to the
.M sge_execd 8
on those hosts (see
.B max_unheard
). Likely reasons are a breakdown of
the host or a breakdown of the network connection in between, but also
.M sge_execd 8
may not be executing on such hosts.
.PP
In any case, Univa Grid Engine can reschedule jobs running on such hosts to
another system.
.B reschedule_unknown
controls the time which
Univa Grid Engine will wait before jobs are rescheduled after a host became
unknown. The time format specification is hh:mm:ss. If the special
value 00:00:00 is set, then jobs will not be rescheduled from this host.
.PP
Rescheduling is only initiated for jobs which have activated the rerun flag
(see the
.B -r y
option of
.M qsub 1
and the
.B rerun
option of
.M queue_conf 5 ).
Parallel jobs are only rescheduled if the host on which their
master task executes is in unknown state. The behavior of
.B reschedule_unknown
for parallel jobs and for jobs without the rerun flag be set can be
adjusted using the \fBqmaster_params\fP settings
.B ENABLE_RESCHEDULE_KILL
and
.B ENABLE_RESCHEDULE_SLAVE.
.PP
Checkpointing jobs will only be
rescheduled when the
.B when
option of the corresponding checkpointing environment contains an
appropriate flag. (see
.M checkpoint 5 ).
Interactive jobs (see
.M qsh 1 ,
.M qrsh 1 ,
.M qtcsh 1 )
are not rescheduled.
.PP
The default for
.B reschedule_unknown
is 00:00:00
.PP
The global configuration entry for this value may be over written by 
the execution host local configuration.
.\"
.\"  
.SS "\fBmax_unheard\fP"
If
.M sge_qmaster 8
could not contact or was not contacted by the execution daemon of a host
for \fBmax_unheard\fP seconds, all queues residing on that particular host
are set to status unknown.
.M sge_qmaster 8 ,
at least,
should be contacted by the execution daemons in order to get the load
reports. Thus, \fBmax_unheard\fP should by greater than the
\fBload_report_time\fP (see above).
.PP
Changing \fBmax_unheard\fP takes immediate effect.
The default for \fBmax_unheard\fP is 5 minutes.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBloglevel\fP"
This parameter specifies the level of detail that Univa Grid Engine components such
as
.M sge_qmaster 8
or
.M sge_execd 8
use to produce informative, warning or error messages which are logged
to the \fImessages\fP files in the master and execution daemon
spool directories (see the description of the 
\fBexecd_spool_dir\fP parameter above). The following message
levels are available:
.\"
.IP "\fIlog_err\fP"
All error events being recognized are logged.
.\"
.IP "\fIlog_warning\fP"
All error events being recognized and all detected signs of 
potentially erroneous behavior are logged.
.\"
.IP "\fIlog_info\fP"
All error events being recognized, all detected signs of 
potentially erroneous behavior and a variety of informative
messages are logged.
.PP
Changing \fBloglevel\fP will take immediate effect.
.PP
The default for \fBloglevel\fP is \fIlog_warning\fP.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBmax_aj_instances\fP"
This parameter defines the maximum amount of array task to be scheduled to
run simultaneously per array job.  An instance of an array task will be
created within the master daemon when it gets a start order from the
scheduler. The instance will be destroyed when the array task finishes.
Thus the parameter provides control mainly over the memory consumption of
array jobs in the master and scheduler daemon. It is most useful for very
large clusters and very large array jobs.  The default for this parameter
is 2000. The value 0 will deactivate this limit and will allow the
scheduler to start as many array job tasks as suitable resources are
available in the cluster.
.PP
Changing \fBmax_aj_instances\fP will take immediate effect.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBmax_aj_tasks\fP"
This parameter defines the maximum number of array job tasks within an array
job.
.M sge_qmaster 8
will reject all array job submissions which request
more than
.B max_aj_tasks
array job tasks. The default for this parameter is 75000. The value 0
will deactivate this limit.
.PP
Changing \fBmax_aj_tasks\fP will take immediate effect.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBmax_u_jobs\fP"
The number of active (not finished) jobs which each Univa Grid Engine user can
have in the system simultaneously is controlled by this parameter. A value
greater than 0 defines the limit. The default value 0 means "unlimited". If
the
.B max_u_jobs
limit is exceeded by a job submission then the submission command exits
with exit status 25 and an appropriate error message.
.PP
Changing \fBmax_u_jobs\fP will take immediate effect.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBmax_jobs\fP"
The number of active (not finished) jobs simultaneously allowed in Univa Grid Engine
is controlled by this parameter. A value greater than 0 defines the limit. 
The default value 0 means "unlimited". If the
.B max_jobs
limit is exceeded by a job submission then the submission command exits
with exit status 25 and an appropriate error message.
.PP
Changing \fBmax_jobs\fP will take immediate effect.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBmax_advance_reservations\fP"
The number of active (not finished) Advance Reservations simultaneously
allowed in Univa Grid Engine is controlled by this parameter. A value greater
than 0 defines the limit. The default value 0 means "unlimited". If the
.B max_advance_reservations
limit is exceeded by an Advance Reservation request then the submission
command exits with exit status 25 and an appropriate error message.
.PP
Changing \fBmax_advance_reservations\fP will take immediate effect.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBenforce_project\fP"
If set to \fItrue\fP, users are required to request a project whenever
submitting a job. See the \fB\-P\fP option to
.M qsub 1
for details.
.PP
Changing \fBenforce_project\fP will take immediate effect.
The default for \fBenforce_project\fP is \fIfalse\fP.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBenforce_jc\fP"
If set to \fItrue\fP, users are required to specify a job class whenever
submitting a job. Default value for this parameter is \fIfalse\fP.
Manager can define a default job class with the \fBdefault_jc\fP parameter 
of this configuration. This allows to define a fallback job class that will
be automatically used if the user does not specify a job class.
.PP
.\"
.\"
.SS "\fBdefault_jc\fP"
This parameter allows to specify a job class that
will be used as default for each submitted job if the user itself does
not request a certain job class. Default for this parameter is \fINONE\fP.
.\"
.\"
.SS "\fBenforce_user\fP"
If set to \fItrue\fB, a
.M user 5
must exist to allow for job submission. Jobs are rejected if no corresponding user 
exists. 
.PP
If set to \fIauto\fB, a
.M user 5
object for the submitting user will automatically be created during
job submission, if one does not already exist. The \fBauto_user_oticket\fP,
\fBauto_user_fshare\fP, \fBauto_user_default_project\fP, and
\fBauto_user_delete_time\fP configuration parameters will be used as
default attributes of the new
.M user 5
object.
.PP
Changing \fBenforce_user\fP will take immediate effect.
The default for \fBenforce_user\fP is \fIauto\fP.
.PP
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBauto_user_oticket\fP"
The number of override tickets to assign to automatically created
.M user 5
objects. User objects are created automatically if the
.B enforce_user
attribute is set to \fIauto\fP.
.
.PP
Changing
.B auto_user_oticket
will affect any newly created user objects, but will not change user
objects created in the past.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBauto_user_fshare\fP"
The number of functional shares to assign to automatically created
.M user 5
objects. User objects are created automatically if the
.B enforce_user
attribute is set to \fIauto\fP.
.
.PP
Changing
.B auto_user_fshare
will affect any newly created user objects, but will not change user
objects created in the past.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBauto_user_default_project\fP"
The default project to assign to automatically created
.M user 5
objects. User objects are created automatically if the
.B enforce_user
attribute is set to \fIauto\fP.
.
.PP
Changing
.B auto_user_default_project
will affect any newly created user objects, but will not change user
objects created in the past.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBauto_user_delete_time\fP"
The number of seconds of inactivity after which automatically created
.M user 5
objects will be deleted. User objects are created automatically if the
.B enforce_user
attribute is set to \fIauto\fP. If the user has no active or pending
jobs for the specified amount of time, the
object will automatically be deleted.  A value of 0 can be used to
indicate that the automatically created user object is permanent and
should not be automatically deleted.
.PP
Changing
.B auto_user_delete_time
will affect the deletion time for all users with active jobs.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBset_token_cmd\fP"
.B Note:
Deprecated, may be removed in future release.
.br
This parameter is only present if your Univa Grid Engine system is licensed
to support AFS.
.PP
\fBSet_token_cmd\fP points to a command which sets and extends AFS
tokens for Univa Grid Engine jobs. In the standard Univa Grid Engine AFS
distribution, it is supplied as a script which expects two command line
parameters. It reads the token from STDIN, extends the token's
expiration time and sets the token:
.PP
.RS
.nf
<set_token_cmd> <user> <token_extend_after_seconds>
.fi
.RE
.PP
As a shell script this command will call the programs:
.PP
.RS
.nf
- SetToken
- forge
.fi
.RE
.PP
which are provided by your distributor as source code. The script looks as
follows:
.PP
.RS
.nf
--------------------------------
#!/bin/sh
# set_token_cmd
forge -u $1 -t $2 | SetToken
--------------------------------
.fi
.RE
.PP
Since it is necessary for \fIforge\fP to read the secret AFS server
key, a site might wish to replace the \fBset_token_cmd\fP script by a
command, which connects to a custom daemon at the AFS server. The
token must be forged at the AFS server and returned to the local
machine, where \fISetToken\fP is executed.
.PP
Changing \fBset_token_cmd\fP will take immediate effect.
The default for \fBset_token_cmd\fP is none.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBpag_cmd\fP"
.B Note:
Deprecated, may be removed in future release.
.br
This parameter is only present if your Univa Grid Engine system is licensed
to support AFS.
.PP
The path to your \fIpagsh\fB is specified via this parameter.
The
.M sge_shepherd 8
process and the job run in a \fIpagsh\fP. Please ask your AFS administrator
for details.
.PP
Changing \fBpag_cmd\fP will take immediate effect.
The default for \fBpag_cmd\fP is none.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBtoken_extend_time\fP"
.B Note:
Deprecated, may be removed in future release.
.br
This parameter is only present if your Univa Grid Engine system is licensed
to support AFS.
.PP
The \fBtoken_extend_time\fP is the time period for which AFS tokens are periodically 
extended. Univa Grid Engine
will call the token extension 30 minutes before the tokens expire until
jobs have finished and the corresponding tokens are no longer required.
.PP
Changing \fBtoken_extend_time\fP will take immediate effect.
The default for \fBtoken_extend_time\fP is 24:0:0, i.e. 24 hours.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBshepherd_cmd\fP"
.br
Alternative path to the \fBshepherd_cmd\fP binary. Typically used to call
the shepherd binary by a wrapper script or command.
.PP
Changing \fBshepherd_cmd\fP will take immediate effect. The default
for \fBshepherd_cmd\fP is none.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBgid_range\fP"
The \fBgid_range\fP
is a comma separated list of range expressions of the form n-m (n as
well as m are integer numbers greater than 99), where m is an
abbreviation for m-m. These numbers are used in
.M sge_execd 8
to identify processes belonging to the same job.
.PP
Each
.M sge_execd 8
may use a separate set up group ids for this purpose.
All number in the group id range have to be unused
supplementary group ids on the system, where the
.M sge_execd 8
is started.
.PP
Changing \fBgid_range\fP will take immediate effect.
There is no default for \fBgid_range\fP. The administrator will have to
assign a value for \fBgid_range\fP during installation of Univa Grid Engine.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBqmaster_params\fP"
A list of additional parameters can be passed to the 
Univa Grid Engine qmaster. The following values are recognized:
.IP "\fIALLOW_INCREASE_POSIX_PRIORITY\fP"
If this parameter is set then the POSIX priority of jobs might be increased by users
up to level 0 for their own jobs even if they do not have the operator or manager role.
In case of absence of this parameter users are only allowed
to decrease the priority of their jobs whereas operators and managers might increase/decrease 
the priority of jobs independent of the ownership.
.IP "\fIALLOW_REQUEST_CHANGE_FOR_ALL_USERS\fP"
If this parameter is set then all users are allowed to change the assigned resources
of running jobs (see qalter -when NOW), which is also the default in case of absence of
this parameter. It can be set to 0 to disallow the modification for all users
that do not have the manager role. This parameter does not restrict resource modification
of resource requests that will get active on reschedule (see qalter -when ON_RESCHEDULE).
.IP "\fIALLOW_JC_AS_VIOLATION\fP"
If this parameter is set then managers are allowed to change job attributes of jobs derived 
from a job class where the access specifier would normally not allow adjustment.
.IP "\fIALLOW_PREEMPT_OWN_JOBS\fP"
If this parameter is set then users are allowed to trigger manual preemption requests for
own jobs. As default only managers and operators are allowed to trigger manual preemption 
requests.
.IP "\fIENABLE_ENFORCE_MASTER_LIMIT\fP"
If this parameter is set then the \fBs_rt\fP, \fBh_rt\fP limit of a running job 
are tested and executed by the 
.M sge_qmaster 8
when the 
.M sge_execd 8
where the job is in unknown state.
.sp 1
After \fBs_rt\fP or \fBh_rt\fP limit of a job is expired then the master daemon will 
wait additional time defined by \fBDURATION_OFFSET\fP (see 
.M sched_conf 5 ). 
If the execution daemon still cannot be contacted when this 
additional time is elapsed, then the master daemon will force 
the deletion of the job (see \fB-f\fP of 
.M qdel 1 ).
.sp 1
For jobs which will be deleted that way an accounting record will be created. 
As usage the record will contain the last reported online usage, when the 
execution daemon could contact qmaster. The \fBfailed\fP state in the record 
will be set to 37 to indicate that the job was terminated by a limit enforcement 
of master daemon.
.sp 1
After the restart of 
.M sge_qmaster 8
the limit enforcement will at first be triggered after the double of the 
biggest \fBload_report_interval\fP interval defined in 
.M sge_conf 5
has been elapsed. This will give the execution daemons enough time to 
reregister at master daemon. 
.\"
.IP "\fIENABLE_FORCED_QDEL_IF_UNKNOWN\fP"
If this parameter is set then a deletion request for a job is automatically interpreted 
as a forced deletion request (see \fB-f\fP of 
.M qdel 1 ) 
if the host, where the job is running is in unknown state.
.\"
.IP "\fIENABLE_SUP_GRP_EVAL\fP"
By default all UNIX group entries in access lists, the manager or operator list 
will only be evaluated against the primary UNIX group of users. If such 
group entries should also be evaluated 
against secondary groups then this paramter can be defined. 
.\"
.IP "\fIENABLE_FORCED_QDEL\fP"
If this parameter is set, non-administrative users can force deletion of
their own jobs via the \fI\-f\fP option of
.M qdel 1 .
Without this parameter, forced deletion of jobs is only allowed by the
Univa Grid Engine manager or operator.
.sp 1
\fBNote:\fP Forced deletion for jobs is executed differently depending
on whether users are Univa Grid Engine administrators or not. In case of
administrative users, the jobs are removed from the internal database of
Univa Grid Engine immediately. For regular users, the equivalent of a normal
.M qdel 1
is executed first, and deletion is forced only if the normal cancellation
was unsuccessful.
.\"
.IP "\fIFORBID_RESCHEDULE\fP"
If this parameter is set, re-queuing of jobs cannot
be initiated by the job script which is under control
of the user. Without this parameter jobs returning the
value 99 are rescheduled. This can be used to cause the
job to be restarted at a different machine, for instance if there
are not enough resources on the current one.
.PP
.IP "\fIFORBID_APPERROR\fP"
If this parameter is set, the application cannot set itself to error state.
Without this parameter jobs returning the value 100 are set to error state 
(and therefore can be manually rescheduled by clearing the error state).
This can be used to set the job to error state when a starting condition
of the application is not fulfilled before the application itself has been 
started, or when a clean up procedure (e.g. in the epilog) decides that it is
necessary to run the job again, by returning 100 in the prolog, pe_start, 
job script, pe_stop or epilog script.
.PP
.IP "\fIDISABLE_AUTO_RESCHEDULING\fP"
.B Note:
Deprecated, may be removed in future release.
.br
If set to "true" or "1", the \fIreschedule_unknown\fP parameter
is not taken into account.
.PP
.IP "\fIENABLE_RESCHEDULE_KILL\fP"
If set to "true" or "1", the \fIreschedule_unknown\fP parameter
affects also jobs which have the rerun flag not activated
(see the
.B -r y
option of
.M qsub 1
and the
.B rerun
option of
.M queue_conf 5 ), 
but they are just finished as they can't be rescheduled.
.PP
.IP "\fIENABLE_RESCHEDULE_SLAVE\fP"
If set to "true" or "1" Univa Grid Engine triggers job rescheduling also when 
the host where the slave tasks of a parallel job executes is in unknown state, 
if the \fIreschedule_unknown\fP parameter is activated.
.PP
.IP "\fIRESCHEDULE_ON_KILLED_EPILOG\fP"
If set to "true" or "1", the behaviour depending on the exit status of the epilog as described in
section \fIepilog\fP is in effect, which means if the epilog dies because of a signal, causing
its exit_status to be larger than 127, the queue is put in error state and the job is
re-enqueued to the pending job list.
.br
If set to "false" or "0", if the epilog dies because of a signal, the job finishes normally and
the queue is not put in error state. The "failed" field of the job is set to "15 : in epilog"
then, but the "exit_status" is the one of the job itself.
.br
To detect if an epilog was signaled solely its exit status is taken into account, i.e. an epilog
that exits with a status > 127 is handled like an epilog that was signaled.
.br
The default value of this parameter is "true".
.PP
.IP "\fIMAX_DYN_EC\fP"
Sets the max number of dynamic event clients (as used by qsub -sync y 
and by Univa Grid Engine DRMAA API library sessions). The default is set to 1000. 
The number of dynamic event clients should not be bigger than half of 
the number of file descriptors the system has. The number of file 
descriptors are shared among the connections to all exec hosts, all 
event clients, and file handles that the qmaster needs.
.PP
.IP "\fIMONITOR_TIME\fP"
Specifies the time interval when the monitoring information should be printed. The
monitoring is disabled by default and can be enabled by specifying an interval.
The monitoring is per thread and is written to the messages file or displayed by
the "qping -f" command line tool. Example: MONITOR_TIME=0:0:10 generates and
prints the monitoring information approximately every 10 seconds. The specified
time is a guideline only and not a fixed interval. The interval that is actually
used is printed.  In this example, the interval could be anything between 9
seconds and 20 seconds.
.PP
.IP "\fIMONITOR_REQUEST_QUEUES\fP"
If set to "true" or "1" then addition information about the qmaster internal
request queues will be provided in the monitoring output of qping. Find more 
information in 
.M sge_diagnostics 1 .
.PP
.IP "\fILOG_MONITOR_MESSAGE\fP"
Monitoring information is logged into the messages files by default. This
information can be accessed via by
.M qping 1 .
If monitoring is always enabled, the messages files can become quite large.
This switch disables logging into the messages files, making
.I qping -f
the only source of monitoring data.
.PP
.IP "\fIPROF_SIGNAL\fP"
Profiling provides the user with the possibility to get system measurements.
This can be useful for debugging or optimization of the system. The profiling 
output will be done within the messages file.

Enables the profiling for qmaster signal thread.
(e.g. PROF_SIGNAL=true)
.PP
.IP "\fIPROF_WORKER\fP"
Enables the profiling for qmaster worker threads.
(e.g. PROF_WORKER=true)
.PP
.IP "\fIPROF_LISTENER\fP"
Enables the profiling for qmaster listener threads.
(e.g. PROF_LISTENER=true)
.PP
.IP "\fIPROF_DELIVER\fP"
Enables the profiling for qmaster event deliver thread.
(e.g. PROF_DELIVER=true)
.PP
.IP "\fIPROF_TEVENT\fP"
Enables the profiling for qmaster timed event thread.
(e.g. PROF_TEVENT=true)
.IP "\fIPROF_COMMLIB_TIME\fP"
Enables the profiling for communication library. The value specifies the log interval for commlib profiling
into the messages file. The logging shows the number of connected clients, the number of buffered
messages at commlib layer (incoming/outgoing), the memory needed within the commlib layer for the buffered
messages (incoming/outgoing) and the number of cached resolved hostnames.
.PP
.IP "\fILOG_INCOMING_MESSAGE_SIZE\fP"
This parameter is used to define if profiling information about incoming requests is logged into the messages file.
The specified value will be used as threshold. All incoming messages needing more memory size than specified will be logged.
Default value for this parameter is 0 which means the feature is turned off.
(e.g. LOG_INCOMING_MESSAGE_SIZE=20M)
.PP
.IP "\fILOG_OUTGOING_MESSAGE_SIZE\fP"
This parameter is used to define if profiling information about outgoing requests is logged into the messages file.
The specified value will be used as threshold. All outgoing messages needing more memory size than specified will be logged.
Default value for this parameter is 0 which means the feature is turned off.
(e.g. LOG_OUTGOING_MESSAGE_SIZE=20M)
.PP
.IP "\fIMAX_INCOMING_MESSAGE_SIZE\fP"
This parameter is used to define a message size limit for accepting incoming requests. 
All incoming client requests using more memory than specified are rejected. The client will get an error
message for the request. The value cannot be set below 1M. Values < 1M will be interpreted as 0 (=turned off).
All rejected client requests are logged into the messages file.
Default value for this parameter is 0 which means the feature is turned off.
(e.g. MAX_INCOMING_MESSAGE_SIZE=1G)
.PP
.IP "\fIMAX_OUTGOING_MESSAGE_SIZE\fP"
This parameter is used to define a message size limit for creating client responses like qstat -j "*".
All client requests that result in creating a response message exceeding the specified memory size
will get an error message. The value cannot be set below 1M. Values < 1M will be interpreted as 0 (=turned off).
All rejected client requests are logged into the messages file.
Default value for this parameter is 0 which means the feature is turned off.
(e.g. MAX_OUTGOING_MESSAGE_SIZE=1G)
.PP
.IP "\fISTREE_SPOOL_INTERVAL\fP"
Sets the time interval for spooling the sharetree usage. The
default is set to 00:04:00. The setting accepts colon-separated
string or seconds. There is no setting to turn the sharetree spooling
off. 
(e.g. STREE_SPOOL_INTERVAL=00:02:00)
.PP
.IP "\fIMAX_JOB_DELETION_TIME\fp
Sets the value of how long the qmaster will spend deleting jobs. After this time,
the qmaster will continue with other tasks and schedule the deletion of remaining
jobs at a later time. The default value is 3 seconds, and will be used if no value
is entered. The range of valid values is > 0 and <= 5.
(e.g. MAX_JOB_DELETION_TIME=1)
.PP
.IP "\fIMAX_MASTER_TASK_WAIT_TIME\fp
Sets the value of how long the qmaster will wait for getting all slave task reports
for parallel jobs when the master task already has been finished. The value is the
waiting time in seconds. The range of valid values is >= 20 and <= 720. The default
for this parameter is to wait 20 seconds.
(e.g. MAX_MASTER_TASK_WAIT_TIME=30)
.PP
.IP "\fIENABLE_JOB_FAILURE_IF_SLAVE_TASK_MISSING\fp
If this parameter is set to true a missing slave task report of a tightly integrated
parallel job will set the failed state of the master task to 101. If the master task
is already in failure state the value of the master task will not be overwritten.
(e.g. ENABLE_JOB_FAILURE_IF_SLAVE_TASK_MISSING=true)
.PP
.IP "\fIENABLE_JOB_FAILURE_ON_SLAVE_TASK_ERROR\fp
If this parameter is set to true a slave task which is reporting a failure or
reports a non-zero exit status will automatically set the failed state for the master
task of the parallel job. 
The first slave job which is reporting a non-zero exit status will set the master task
failure field in the accounting file to the value 102.
If a slave task is reporting some general failure the master task failure state would
be set to 103.
If the master task is already in failure state the value will not be overwritten.
This option is only valid for tight integration jobs.
(e.g. ENABLE_JOB_FAILURE_ON_SLAVE_TASK_ERROR=true)
.PP
.IP "\fIlost_job_timeout\fp
If this timeout parameter is set the qmaster worker threads will
monitor the jobs reported by the execution daemons. If a task of a job that was started on
an execution node is not reported for longer than the defined timeout the job is logged
in the qmaster messages file.
Job loss is e.g. possible if an execution daemon cannot read one ore more files
in his spooling directory at startup. This can happen when the spooling directory runs
out of disc space or on any other possible file problems. Such jobs typically are shown
as running and occupy a slot on the execution daemon indefinitely
(see also "enable_lost_job_reschedule").
If an execution daemon is not online or came online shortly the timeout will be
extended until all preconditions are fulfilled. The minimum timeout depends also on the
used "max_unheard" and "load_report_time" settings. If the timeout is set below the allowed
minimum timeout - the calculated minimum timeout is used. The resulting timeout will be logged in
the qmaster messages file. If the parameter is changed the job timeouts will be  reinitialized.
If the timeout is set to 00:00:00 the lost job detection is turned off. This is also the
default setting for this parameter. The timeout is specified in seconds.
.PP
.IP "\fIenable_lost_job_reschedule\fp
This parameter is only valid if there is a "lost_job_timeout" parameter configured. If it
is enabled the jobs for which the timeout was detected are set to error and will show up in
the pending job list again.
The accounting record will contain the "failed" state 22.
Such jobs will not occupy a slot on the execution node and the slots are free again for
other jobs. The administrator might remove the error state and let the job run again or
just delete them after solving the reported problem.
The default for "enable_lost_job_reschedule" is false.
.PP
.IP "\fIgdi_timeout\fp
Sets how long the communication will wait for gdi send/receive operations.
The default value is set to 60 seconds. After this time, the communication library will
retry, if "gdi_retries" is configured, receiving the gdi request. In case of not configured
"gdi_retries" the communication will return with a "gdi receive failure" 
(e.g. gdi_timeout=120 will set the timeout time to 120 sec)
Configuring no gdi_timeout value, the value defaults to 60 sec.
.PP
.IP "\fIgdi_request_session_timeout\fp
Default duration of a session as defined for "time" in sge_types(1). 
When this value is not defined then 00:15:00 (= 900 seconds) 
will be used by default duration for new sessions. Changing this 
value will not change the duration of existing sessions.
.PP
.IP "\fImax_reader_delay\fp
If defined then the value for this parameter has to be an 
integer value in the range from 0 to 5000. It defines the 
number of milliseconds before the event processing thread 
of the read-only-thread thread-pool will enforce the update 
of the read-only data store. 
.sp 1
0 means that the event processing thread will interrupt 
all other read-only threads as soon as possible 
(regularly when currently processed requests are finished) 
so that it can update the read-only thread data store 
immediately. 
.sp 1
With values >0 the event processing thread also tries to process 
immediately but if there are pending read-only-requests then 
handling of this requests will be preferred as long as the 
defined time value did not elapse.
.sp 1
When this value is not specified then the used reader delay 
value is 1000 which is also the recommended value for up to 
8 read-only threads. If more read-only threads are started 
then it is recommended to increase the delay (8-16 threads => 2500; 
16-32 threads => 3750; 32-64 threads 5000).
.sp 1
Please note that the delay is the same that you might see 
for command line clients that use a session (see 
.M session_conf 5 )
.
.PP
.IP "\fIenforce_gdi_worker\fp
GDI (Grid Engine Data Interface) is the name of an interface that 
command line clients use to communicate with qmaster.
.sp 1
When \fIenforce_gdi_worker\fP is set to 1 then all GDI requests 
(read-only and read-write) will be handled by worker threads in 
.M sge_qmaster 1 
even if reader threads are activated. Request will then be handled 
in FCFS manner like it was done in prior versions of Univa Grid Engine.
.sp 1
Read-only threads can also be disabled by setting the \fIbootstrap\fP 
parameter \fIreader\fP to 0. This does not only disable reader threads 
but also disables the creation of the read-only thread pool in 
.M sge_qmaster 1 . 
Please note that changing the bootstrap file requires to restart 
.M sge_qmaster 1 
before the changes get active.
.PP
.IP "\fIenforce_gdi_reader_for_execd\fP"
If set to "true" or "1" also incoming get requests from the execution
daemons are handled by the reader threads if such threads are configured in the
bootstrap configuration file. Default value for this parameter is false.
.PP
.IP "\fIgdi_retries\fp
Sets how often the gdi receive call will be repeated until the gdi receive
error appears. The default is set to 1. In this case the call will be done 1 time with no retry.
Setting the value to -1 the call will be done permanently. In combination with gdi_timeout parameter
it is possible to configure a system with eg. slow NFS, to make sure that all jobs will be submitted.
(e.g. gdi_retries=4)
.PP
.IP "\fIcl_ping\fp
Turns on/off a communication library ping. This parameter will create additional debug output. 
This output shows information about the error messages which are returned by communication
and it will give information about the application status of the qmaster. eg, if it's unclear what's the
reason for gdi timeouts, this may show you some useful messages. The default value is false (off) 
(e.g cl_ping=false)
.PP
.IP "\fISCHEDULER_TIMEOUT\fp
Setting this parameter allows the scheduler GDI event acknowledge timeout to be manually configured to a
specific value. Currently the default value is 10 minutes with the default scheduler configuration and limited
between 600 and 1200 seconds. Value is limited only in case of default value. The default value depends
on the current scheduler configuration. The \fISCHEDULER_TIMEOUT\fP value is specified in seconds.
.PP
.IP "\fIjsv_timeout\fp
This parameter measures the response time of the server JSV. In the event that the response time of the JSV 
is longer than the timeout value specified, this will cause the JSV to be re-started. The default value for the
timeout is 10 seconds and if modified, must be greater than 0. If the timeout has been reach, the JSV will only
try to re-start once, if the timeout is reached again an error will occur.
.PP
.IP "\fIjsv_threshold\fp
The threshold of a JSV is measured as the time it takes to perform a server job verification. If this value is 
greater than the user defined value, it will cause logging to appear in the qmaster messages file at the INFO 
level. By setting this value to 0, all jobs will be logged in the qmaster messages file. This value is specified
in milliseconds and has a default value of 5000.
.IP "\fIgdi_threshold\fp
When processing a gdi request (e.g. submitting a job or querying job information via qstat) takes too long
a warning is printed into the qmaster messages file.
The time being considered too long can be defined by setting \fIgdi_threshold\fp in seconds.
Default is a threshold of 60 seconds.
.IP "\fIgdi_multi_read_req\fp
This parameter is deprecated since Univa Grid Engine 8.2. Functionality will 
be removed with the next minor or major release. Instead 
\fIgdi_request_limits\fP can be used (see above).
.sp 1
This parameters defines the maximum number of multi-gdi-get requests that are
accepted by qmaster per second. Multi-gdi-get requests are sent by command line
clients like qstat, qhost or qmon to receive status information about the
running cluster. When a command line client recognizes that it runs into this
limit then it will retry to receive this information for 60 seconds. If whithin
this time qmaster does not accept the request then the client will abort.
The default value for this parameter is 0 to disable this limit. In clusters where
users execute qstat -f or qhost regularely the limit might be set to a positive
integer value so that these commands will not have a negative impact on the
cluster throughput. This limit has no influence on single-gdi-get requests that
are sent by administration commands invoked via qconf.
.IP "\fIOLD_RESCHEDULE_BEHAVIOR\fp
Beginning with version 8.0.0 of Univa Grid Engine the scheduling behavior changed
for jobs that are rescheduled by users. Rescheduled jobs will not be put at the
beginning of the pending job list anymore. The submit time of those jobs is set
to the end time of the previous run. Due to that those rescheduled jobs will be
appended at the end of the pending job list as if a new job would have been
submitted. To achive the old behaviour the paramter \fIOLD_RESCHEDULE_BEHAVIOR\fP
has to be set. Please note that this parameter is declared as deprecated.
So it might be removed with next minor release.
.IP "\fIOLD_RESCHEDULE_BEHAVIOR_ARRAY_JOB\fp
Beginning with version 8.0.0 of Univa Grid Engine the scheduling behavior changed
for array job tasks that are rescheduled by users. As soon as a array job task
gets scheduled all remaining pending tasks of that job will be put at the end of
the pending job list. To achive the old scheduling behavior the paramter
\fIOLD_RESCHEDULE_BEHAVIOR_ARRAY_JOB\fP has to be set. Please note that this
parameter is declared as deprecated. So it might be removed with next minor release.
.PP
.IP "\fIENABLE_SUBMIT_LIB_PATH\fp
Beginning with version 8.0.1p3 of Univa Grid Engine environment variables like
LD_PRELOAD, LD_LIBRARY_PATH and similar variables by default may no longer be
set via submit option -v or -V.

Setting these variables could be misused to execute malicious code from user jobs,
if the execution environment contained methods (e.g. prolog) to be executed as the root user,
or if the old interactive job support (e.g. via ssh) was configured.

Should it be necessary to allow setting environment variables like LD_LIBRARY_PATH 
(except LD_PRELOAD see \fIENABLE_SUBMIT_LD_PRELOAD\fP) via submit option
-v or -V, this can be enabled again by setting \fIENABLE_SUBMIT_LIB_PATH\fP to TRUE.

In general the correct job environment should be set up in the job script or in a prolog, making the use of
the -v or -V option for this purpose unnecessary.
.PP
.IP "\fIENABLE_SUBMIT_LD_PRELOAD\fp
Setting these variable could be misused to execute malicious code from user jobs,
if the execution environment contained methods (e.g. prolog) to be executed as the root user,
or if the old interactive job support (e.g. via ssh) was configured.

Should it be necessary to allow setting LD_PRELOAD via submit option -v or -V, this
can be enabled again by setting \fIENABLE_SUBMIT_LD_PRELOAD\fP to TRUE.

In general the correct job environment should be set up in the job script or in a prolog, making the use of
the -v or -V option for this purpose unnecessary.

See also \fIENABLE_SUBMIT_LIB_PATH\fP for more information.
.PP
.IP "\fIALLOW_EMPTY_AFS_TOKEN\fp
This parameter is considered only if Univa Grid Engine is installed with AFS support. If this parameter is set to TRUE the AFS
token generation can be done with the \fBset_token_cmd\fP only. The configured script can be used to completely
generate the token at job execution time. The default method to generate the token by setting up the script
$SGE_ROOT/util/get_token_cmd is still active with this setting, but it will not result in an
error if the get_token_cmd script is not available. If this parameter is set to TRUE moving away the get_token_cmd
script is suggested to get a better submit performance.
.PP
.IP "\fIENABLE_REDUCE_MEM_FREE\fp
When the mem_free complex is configured as a consumable this parameter allows the
users to reduce the requested amount of mem_free during job run-time. When the parameter
is set, the user is able to reduce the requested amount of memory by performing a
qalter on the previously requested mem_free consumable. If this parameter is disabled
or not set mem_free (when configured as a consumable) can't be changed for a running job.
.PP
.IP "\fIMAX_JOB_ID\fP
This parameter can be used for setting the maximum job id used by Univa Grid Engine.
Job ids are allocated from id 1 to the maximum set.

Setting \fIMAX_JOB_ID\fP to 0 disables job submission.

The default maximum job id is 4294967295 (the maximum 32bit number).

This parameter also has effect on the advance reservation ids.
.PP
.IP "\fIMIN_PENDING_ENROLLED_TASKS\fP
Ticket calculation for sharetree, functional and override policy is done per job and for already existing
tasks of array jobs.
Already existing array tasks are running array tasks (getting running tickets)
and array tasks which have been running but are pending again, e.g. due to rescheduling (getting pending tickets).
If different pending tickets shall be computed for tasks of an array job it is necessary to create (enroll) pending array tasks.
This can be controlled via the \fIMIN_PENDING_ENROLLED_TASKS\fP parameter.

Default setting is 0: No pending array tasks will be enrolled for ticket calculation,
the tasks are not created before they are scheduled. Pending tickets are calculated for the whole job,
all tasks of an array job will get the same amount of tickets.

Setting it to a positive number triggers creation of this number of pending array tasks per job.

When it is set to -1 all tasks of an array job will get enrolled.
.PP
.IP "\fISGE_DEBUG_LEVEL\fP
With the environment variable \fISGE_DEBUG_LEVEL\fP debug output of sge_qmaster
can be enabled when sge_qmaster is running non daemonized.
The qmaster_params \fISGE_DEBUG_LEVEL\fP serves the same purpose but can be switched on and off
during runtime. See
.M sge_diagnostics 1
for details about \fISGE_DEBUG_LEVEL\fP. Please note that the delimiter between multiple levels is : (colon) for the qmaster_params, so the environment setting SGE_DEBUG_LEVEL="3 0 0 0 0 0 0 0" translates to qmaster_params SGE_DEBUG_LEVEL=3:0:0:0:0:0:0:0.

Debug output by default goes to stderr, which means, with a daemonized sge_qmaster it would get lost. Please use the qmaster_params \fISGE_DEBUG_TARGET\fP to redirect debug output to file.
.PP
.IP "\fISGE_DEBUG_TARGET\fP
With the \fISGE_DEBUG_TARGET\fP parameter debug output of sge_qmaster can be redirected
into a file, to stdout or to stderr. Default is stderr if the parameter is not set or if a given file cannot be opened.
.PP
.IP "\fIAR_RESERVE_AVAILABLE_ONLY\fP
When this parameter is set to 1 or true, advance reservations submitted via qrsub will only be scheduled to
currently available resources, this means not to
queue instances being disabled, suspended or in error state.
This is a cluster wide setting which when enabled will overwrite the AR specific setting done via qrsub option \fB-rao\fP, see also
.M qrsub 1 .
.PP
.IP "\fIMAX_TCON_TASKS\fP
This parameter can be used to disable (value 0) concurrent array jobs
or limit the maximum size of concurrent array jobs.
Submission of concurrent array jobs will be rejected if their size (number of
array tasks) exceeds the value of MAX_TCON_TASKS.
See also documentation of the \fI\-tcon\fP submit option in
.M sge_submit 1 .
.PP
.IP "\fIDISABLE_NAME_SERVICE_LOOKUP_CACHE\fP
This parameter can be used to disable (value 0) caching of name service lookup
calls. The default setting is enabled (value 1).
Switching off the cache might decrease the performance significantly.
.PP
.IP "\fINAME_SERVICE_LOOKUP_CACHE_ENTRY_LIFE_TIME\fP
This parameter can be used to define when a cached entry in the name service lookup cache is removed.
The default setting is zero (value 0). The default setting will auto adjust the timeout for compatibily
reasons to 600 seconds. The value cannot be set > 86400 (1 day).
Changing this parameter might have a significant performance influence.
.PP
.IP "\fINAME_SERVICE_LOOKUP_CACHE_ENTRY_UPDATE_TIME\fP
This parameter can be used to define when a cached entry in the name service should get re-resolved.
The default setting is zero (value 0). The default setting will auto adjust the timeout for compatibily
reasons to 120 seconds. The value cannot be set > 1800 (30 min).
Changing this parameter might have a significant performance influence.
.PP
.IP "\fINAME_SERVICE_LOOKUP_CACHE_ENTRY_RERESOLVE_TIME\fP
This parameter can be used to define when a cached entry that was not resolveable (name service returned
an error) when the host was added or at the last cache entry update.
The default setting is zero (value 0). The default setting will auto adjust the timeout for compatibily
reasons to 60 seconds. The value cannot be set > 600.
Changing this parameter might have a significant performance influence.
.PP
.IP "\fILOG_JOB_VERIFICATION_TIME\fP
This parameter can be used to enable profiling logging in the qmaster messages file for the job verification with the submission option -w, see also
.M submit 1 .

When the parameter is not set or it is set to a negative value no profiling will be done.

When the parameter is set to 0 then profiling will be done and the resulting verification time will always be logged as an INFO message.

When the parameter is set to a value (threshold) > 0 then profiling will be done, if the verification time exceeds the given threshold a WARNING message will be logged.

.pp
.IP "\fILOG_REQUEST_PROCESSING_TIME\fP
This parameter can be used to enable profiling logging in the qmaster messages file for the processing of requests by worker, reader and event master threads.

When the parameter is not set or it is set to a negative value no profiling will be done.

When the parameter is set to 0 then profiling will be done and the resulting processing time will always be logged as an INFO message.

When the parameter is set to a value (threshold) > 0 then profiling will be done, if the processing time exceeds the given threshold a WARNING message will be logged.

.pp
.IP "\fILOG_SPOOLING_TIME\fP
This parameter can be used to enable profiling logging in the qmaster messages file for spooling operations.

When the parameter is not set or it is set to a negative value no profiling will be done.

When the parameter is set to 0 then profiling will be done and the resulting spooling time will always be logged as an INFO message.

When the parameter is set to a value (threshold) > 0 then profiling will be done, if the spooling time exceeds the given threshold a WARNING message will be logged.
.PP
.pp
Changing \fBqmaster_params\fP will take immediate effect, except gdi_timeout, gdi_retries, cl_ping, these
will take effect only for new connections.
The default for \fBqmaster_params\fP is none.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBexecd_params\fP"
This is used for passing additional parameters
to the Univa Grid Engine execution daemon. The following values are recognized:
.\"
.IP "\fIIGNORE_NGROUPS_MAX_LIMIT\fP"
If a user is assigned to NGROUPS_MAX-1 supplementary groups 
so that Univa Grid Engine is not able to add an addition one for job tracking 
then the job will go into error state when it is started.
Administrators that want prevent the system doing so can set this parameter.
In this case the NGROUPS_MAX limit is ignored and the additional group (see 
\fIgid_range\fP) is not set. As a result for those jobs no online usage will be 
available. Also the parameter \fIENABLE_ADDGRP_KILL\fP will have no effect.
Please note that it is not recommended to use this parameters. Instead the group
membership of the submit user should be reduced.
.PP
.IP "\fIKEEP_ACTIVE\fP"
If set to ERROR, the spool directory of the job (maintained by
.M sge_shepherd 8) , 
the job script, a file which includes all job related messages 
from the execution daemon as also a list of all files located in the jobs 
temp-directory will be sent to the
.M sge_qmaster 8 
if the job had an exit-status != 0 or if the job failed (see
.M accounting 5 ).

If set to ALWAYS, the execution daemon will send the spool directory as also
the debugging files for every job.

These files can be found at $SGE_ROOT/$SGE_CELL/faulty_jobs

If set to true, the execution daemon will not remove the spool directory 
maintained by
.M sge_shepherd 8
for a job (this value should only be set for debugging purposes).
.PP
.IP "\fIKEEP_ACTIVE_SIZE\fP"
If KEEP_ACTIVE is set to ERROR or ALWAYS the execution daemon will transfer files to
.M sge_qmaster 8
As big files might lead to a high memory consumption in 
.M sge_qmaster 8
files with a bigger size than KEEP_ACTIVE_SIZE (in Bytes) will not get sent.
If not set the file size is limited to 20 MB.
.PP
.IP "\fIKEEP_OPEN_FDS\fP"
As part of the start process for a job the sge_shepherd will close all open
file descriptors. If this should not be done for one or more file descriptors then
this variable can be set to one number or to a range of numbers (like 4-9). 
Corresponding file descriptors will then not be closed.
Please note that certain implementations of services (like Active Directory) require
this functionality, so that the processes part of the job, can use underlying 
library functionality.
.PP
.IP "\fIMAX_IJS_CLIENT_WAIT_TIME\fP"
This parameter defines the waiting time for builtin interactive job
support jobs to flush job output at job end and deliver the exit state to
the connected qrsh or qlogin client.
Once an interactive job has finished the
.M sge_shepherd 8)
will wait for an acknowledge from the connected qrsh client. The already
finished job will be shown as running during this time. If the qrsh client
component is suspended for some reason or the network has some outage it might
not always be useful to wait until the data is acknowledged.

If set to INFINITY the
.M sge_shepherd 8)
will only finish on connection errors. If specified as time value in
the format HH:MM:SS all values >= 00:00:01 are used as timeout value. The default
value for this paramter is 1 Minute (00:01:00).

Once the timeout occurs the job will be reported as finished and the final exit state
of the job is available in the accounting file.

The \fIMAX_IJS_CLIENT_WAIT_TIME\fP parameter has no influence on the suspend state
of the qrsh client. A suspended qrsh client which was used to submit the job will stay
suspended until the user unsuspends the qrsh. 

NOTE: The job control feature of the shell where the qrsh job is submitted may be
responsible for suspending the qrsh when it tries to read from stdin or tries to write
to stdout if qrsh is started in background. This can be bypassed using
the \fIqrsh -bgio\fP parameter when submitting the qrsh job as background job 
(see \fI\-bgio\fP option of
.M submit 1
man page for more information).

.PP
.IP "\fIPTF_MIN_PRIORITY\fP, \fIPTF_MAX_PRIORITY\fP"
The maximum/minimum priority which Univa Grid Engine will assign to a job.
Typically this is a negative/positive value in the range of -20
(maximum) to 19 (minimum) for systems which allow setting of priorities
with the
.M nice 2
system call. Other systems may provide different ranges.
.br
The default priority range (varies from system to system) is installed
either by removing the parameters or by setting a value of -999.
.br
See the "messages" file of the execution daemon for the predefined
default value on your hosts. The values are logged during the startup of
the execution daemon.
.PP
.IP "\fIPROF_EXECD\fP"
Enables the profiling for the execution daemon.
(e.g. PROF_EXECD=true)
.PP
.IP "\fISCRIPT_TIMEOUT\fP"
This parameter defines the timeout value for scripts that are executed by 
.M sge_shepherd 8
(e.g. prolog/epilog of a job). Scripts where the execution 
duration would exceed the configured timeout value will be 
terminated by 
.M sge_shepherd 8
automatically. 
The default for this parameter is 2 minutes (00:02:00).  It can be set 
to any value greater than 0. 
.PP
.IP "\fINOTIFY_KILL\fP"
The parameter allows you to change the notification signal for
the signal SIGKILL (see \fI\-notify\fP option of 
.M qsub 1 ).
The parameter either accepts signal names (use the \fI\-l\fP option of
.M kill 1 )
or the special value \fInone\fP. If set to \fInone\fP,
no notification signal will be sent. If it is set to \fITERM\fP, for
instance, or another
signal name then this signal will be sent as notification signal.
.PP
.IP "\fINOTIFY_SUSP\fP"
With this parameter it is possible to modify the notification signal
for the signal SIGSTOP (see \fI\-notify\fP parameter of 
.M qsub 1 ).
The parameter either accepts signal names (use the \fI\-l\fP option of
.M kill 1 )
or the special value \fInone\fP. If set to \fInone\fP,
no notification signal will be sent. If it is set to \fITSTP\fP, for
instance, or another
signal name then this signal will be sent as notification signal.
.PP
.IP "\fIUSE_QSUB_GID\fP"
If this parameter is set to true, the primary group id  active when a
job was submitted will be set to become the primary group id for job
execution. If the parameter is not set, the primary group id as defined for
the job owner in the execution host
.M passwd 5
file is used.
.br
The feature is only available for jobs submitted via
.M qsub 1 ,
.M qrsh 1 ,
.M qmake 1
and 
.M qtcsh 1 .
Also, it only works for
.M qrsh 1
jobs (and thus also for
.M qtcsh 1
and
.M qmake 1 )
if rsh and rshd components are used which are provided with Univa Grid Engine
(i.e., the \fBrsh_daemon\fP and \fBrsh_command\fP parameters may
not be changed from the default).
.PP
.IP "\fIS_DESCRIPTORS\fP, \fIH_DESCRIPTORS\fP, \fIS_MAXPROC\fP, \fIH_MAXPROC\fP,"
.IP "\fIS_MEMORYLOCKED\fP, \fIH_MEMORYLOCKED\fP, \fIS_LOCKS\fP, \fIH_LOCKS\fP"
Specifies soft and hard resource limits as implemented by the
.M setrlimit 2
system call. See this manual page on your system for more information. These
parameters complete the list of limits set by the RESOURCE LIMITS parameter
of the queue configuration as described in
.M queue_conf 5 .
Unlike the resource limits in the queue
configuration, these resource limits are set for every job on this execution
host. If a value is not specified, the resource limit is inherited from the
execution daemon process. Because this would lead to unpredicted results,
if only one limit of a resource is set (soft or hard), the
corresponding other limit is set to the same value.
.br
\fIS_DESCRIPTORS\fP and \fIH_DESCRIPTORS\fP specify a value one greater than the maximum
file descriptor number that can be opened by any process of a job.
.br
\fIS_MAXPROC\fP and \fIH_MAXPROC\fP specify the maximum number of processes that can be
created by the job user on this execution host
.br
\fIS_MEMORYLOCKED\fP and \fIH_MEMORYLOCKED\fP specify the maximum number of bytes of
virtual memory that may be locked into RAM. The value type is \fImemory_specifier\fP as
described in the 
.M sge_types 1
manual page.
.br
\fIS_LOCKS\fP and \fIH_LOCKS\fP specify the maximum number of file locks any process
of a job may establish.
.br
All of these values can be specified using the multiplier letters k, K, m, M, g and G, see
.M sge_types 1
for details. For all of these values, the keyword "INFINITY" (which means RLIM_INFINITY as
described in the
.M setrlimit 2
manual page) can be used to set the resource limit to "unlimited".
.\"
.\"
.IP "\fIINHERIT_ENV\fP"
This parameter indicates whether the shepherd should allow the environment
inherited by the execution daemon from the shell that started it to be inherited
by the job it's starting.  When true, any environment variable that is set in
the shell which starts the execution daemon at the time the execution daemon is
started will be set in the environment of any jobs run by that execution daemon,
unless the environment variable is explicitly overridden, such as PATH or
LOGNAME.  If set to false, each job starts with only the environment variables
that are explicitly passed on by the execution daemon, such as PATH and LOGNAME.
The default value is true.
.PP
.IP "\fISET_LIB_PATH\fP"
This parameter tells the execution daemon whether to add the Univa Grid Engine shared
library directory to the library path of executed jobs.  If set to true, and
INHERIT_ENV is also set to true, the Univa Grid Engine shared library directory will
be prepended to the library path which is inherited from the shell which started
the execution daemon.  If INHERIT_ENV is set to false, the library path will
contain only the Univa Grid Engine shared library directory.  If set to false, and
INHERIT_ENV is set to true, the library path exported to the job will be the one
inherited from the shell which started the execution daemon.  If INHERIT_ENV is
also set to false, the library path will be empty.  After the execution daemon
has set the library path, it may be further altered by the shell in which the
job is executed, or by the job script itself.  The default value for
SET_LIB_PATH is false.
.PP
.IP "\fIENABLE_ADDGRP_KILL\fP"
If this parameter is set then Univa Grid Engine uses the supplementary group ids
(see \fIgid_range\fP) to identify all processes which are to be terminated
when a job is deleted, or when
.M sge_shepherd 8
cleans up after job termination.
.PP
.IP "\fISUSPEND_PE_TASKS\fP"
With this parameter set to TRUE tasks of tightly integrated jobs get
suspended and unsuspended when the job gets suspended or unsuspended.
Some MPI implementations are known to fail when tasks get suspended,
in case you are running such jobs set \fISUSPEND_PE_TASKS\fP to FALSE and
handle suspension / unsuspension through a suspend_method and resume_method, see
.M queue_conf 5 ).
.PP
.IP "\fIPDC_INTERVAL\fP"
This parameter defines the interval how often the PDC (Portable Data Collector)
is executed by the execution daemon. The PDC is responsible for enforcing
the resource limits s_cpu, h_cpu, s_vmem and h_vmem (see
.M queue_conf 5 )
and job usage collection.
The parameter can be set
to a time_specifier (see
.M sge_types 5 )
, to \fBPER_LOAD_REPORT\fP or to \fBNEVER\fP.
If this parameter is set to \fBPER_LOAD_REPORT\fP the PDC is triggered in the
same interval as \fBload_report_time\fP (see above). If this parameter is set
to \fBNEVER\fP the PDC run is never triggered. The default value for this
parameter is 5 seconds.
.br
\fBNote:\fP A PDC run is quite compute extensive may degrade the
performance of the running jobs. But if the PDC runs less often or never the
online usage can be incomplete or totally missing (for example online usage of very short
running jobs might be missing) and the resource limit enforcement is
less accurate or would not happen if PDC is turned of completely.
.PP
.IP "\fIPDC_CACHE_UPDATE_TIMEOUT\fP"
This parameter is used to define the period of time how long the cached process data of a process
that was not identified to belong to a Univa Grid Engine started job is valid. If the timeout
is not reached the cached proc table information will be used. Once the information for the process
is older than the defined timeout it will be re-read from the proc table. If the parameter is set to "0"
the cache refreshing is turned off. This means once the process information is cached there will never
be an update on the cached information.
.br
If you have a high throughput of jobs in your Univa Grid Engine cluster and your process id roll-over time
is short it is recommended to set this parameter to a value below your typical process id wrap-around time. 
.br
The default for this parameter is 120 seconds. This means that the cached process information for such
processes is updated every two minutes.
.br
.PP
.IP "\fIENABLE_BINDING\fP"
If this parameter is set then Univa Grid Engine enables the core binding module
within the execution daemon to apply binding parameters that are specified
during submission time of a job. This parameter is not set per default and
therefore all binding related information will be ignored for hosts other
than lx-amd64 and lx-x86. If the host has such a lx-amd64 or lx-x86 architecture
it is internally turned on per default.
Find more information for job to core binding in the section \fI-binding\fP of
.M qsub 1 .
.PP
.IP "\fIDISABLE_GID_RANGE_OBSERVATION\fP"
If this parameter is set to 1 (or true) then gid range observation is turned off
in the Univa Grid Engine execution daemon. The default for this option is 0 (or false)
which means the execd will per default the processes running on the execution host.
If a process is using a group id that is reserved for starting Univa Grid Engine jobs and
it does not belong to a current running Univa Grid Engine job this group id will be blocked
for starting further Univa Grid Engine jobs until the unexpected processes are gone.
.PP
.IP "\fIDISABLE_M_MEM_FREE\fP"
If this parameter is set to 1 (or true) then the execution daemon does not
report load values for the m_mem_free and m_mem_free_n<NODES> anymore. This
is needed especially in cases where resource reservation for jobs requesting
such a complex value must be enabled. When a load value of a specific
host is lower than the requested value for job then the scheduler does no
resource reservation for that host. In order to prevent this the load value sending can
be turned off.
.PP
.IP "\fIENABLE_MEM_DETAILS\fP"
If this parameter is set to 1 (or true) execution daemons on Linux
report additional per job memory usage: rss (resident set size), pss (proportional set size),
smem (shared memory), pmem (private memory), maxrss (maximum resident set size), maxpss (maximum proportional set size).
These additional memory usage values can be retrieved via qstat -j <job_id>.
.PP
.IP "\fIENFORCE_LIMITS\fP"
When a job is started by
.M sge_execd 8
limits configured in the
.M queue_conf 5
or specified during job submission will be set as per process resource limit, see also
.M setrlimit 2 .

The following limits are in addition enforced by sge_execd as per job limits:
h_cpu, s_cpu, h_rss, s_rss, h_vmem, s_vmem.
If \fBcgroups_params\fP is set to true h_vmem is controlled only by cgroups (see \fBcgroups_params\fP for more information).

The \fIENFORCE_LIMITS\fP parameter allows the specification of where the limits
h_cpu, s_cpu, h_rss, s_rss, h_vmem, s_vmem are enforced:

If \fIENFORCE_LIMITS\fP is not set or if it is set to the value ALL
the limits are both set as resource limit and they are enforced by
.M sge_execd 8
as well.

If \fIENFORCE_LIMITS\fP is set to SHELL, only the resource limits are set,
.M sge_execd 8
will not enforce them.

If \fIENFORCE_LIMITS\fP is set to EXECD, these limits are only enforced by
.M sge_execd 8
INFINITY is set as resource limit.

If \fIENFORCE_LIMITS\fP is set to OFF,
.M sge_execd 8
will not enforce them and INFINITY is set as resource limit.

.IP "\fIMONITOR_PDC\fP"
When this parameter is set to true
.M sge_execd 8
will write information and errors reported by the data collector to its messages file,
e.g. errors when reading from the /proc file system.
\fIMONITOR_PDC\fP can be set to 0 (or false) or 1 (true).
Use this parameter with care and only when suggested by Univa Support,
e.g. for debugging issues with the reporting of online usage, as a significant
amount of information might get written to the 
.M sge_execd 8
messages file.
.br
.PP
Changing \fBexecd_params\fP will take effect after it was propagated to the
execution daemons. The propagation is done in one load report interval.
The default for \fBexecd_params\fP is none.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBcgroups_params\fP"
.P
A list of parameters for enabling and controlling the behavior of cgroups\. This list can be set globally in the global configuration or be overridden in the host configuration for particular hosts\. The cgroups feature is only available for \fIlx\-amd64\fR hosts\. The OS must support cgroups (e\.g\. RHEL >= 6 with installed cgroup packages)\. Each cgroup subsystem must be mounted to a different subdirectory below \fBcgroup_path\fR\. The following values are recognized:
.
.IP \fIcgroup_path\fP
.
.P
If set to \fBnone\fR then the cgroup support is disabled otherwise the path to the cgroup main directory is set here (usually \fI/cgroup\fR)\. All cgroup subsystems must be available in subdirectories here (either as link or as mounted directories)\. Example: For memory limitation \fI/cgroup/memory\fR and for core binding \fI/cgroup/cpuset\fR must exist, when the cgroup_path is set to \fI/cgroup\fR\.
.
.IP \fIcpuset\fP
.
.P
If set to \fBtrue\fR (or \fB1\fR) then core binding is done by the cgroup cpuset subsystem\. This affects only jobs requesting a core binding with the \fB\-binding\fR submission parameter\. Using cpuset is recommended since it limits the job to the chosen CPU cores without the possibility that the user overcomes these limits\.
.
.IP \fIm_mem_free_limit_hard\fP
.
.P
If set to \fBtrue\fR (or \fB1\fR) it restricts the usage of main memory to the value requested with the m_mem_free parameter\. For using this parameter a mounted memory subsystem (\fI$cgroup_path/memory\fR) and a main memory request using the m_mem_free complex is required\. If a job consumes more memory than requested it is usually aborted since further malloc calls will fail\. Internally the value \fImemory\.limit_in_bytes\fR is set\. More details can be found in the operating system / cgroups documentation\.
.
.IP \fIm_mem_free_limit_soft\fP
.
.P
If set to \fBtrue\fR (or \fB1\fR) this parameter restricts the usage of main memory only if the memory limit is exceeded and the operating system detects memory contention\. Main memory restriction is usually applied by pushing back the jobs main memory usage to the soft limits\. Please consult the operating system / Linux kernel documentation for more details\. Internally the value \fImemory\.soft_limit_in_bytes\fR is set in the cgroup memory subsystem\. If \fIm_mem_free_limit_hard\fR is active as well the hard memory limit rule is applied by the cgroup subsystem\.
.
.IP \fIh_vmem_limit\fP
.
.P
If set to \fBtrue\fR (or \fB1\fR) this parameter restricts the usage of the sum of main memory usage and swap space usage
for a job if \fBh_vmem\fR is requested\. Internally the cgroup parameter \fImemory\.memsw\.limit_in_bytes\fR is set\.
Please note that when the limit is applied successfully the \fBh_vmem\fR rlimit is not set for the job anymore\. The execd
daemon will also not enforce the h_vmem limit. This means only cgroups will handle the specified \fBh_vmem\fR rlimit.
If the value is lower than \fBmin_memory_limit\fR it is automatically increased to the configured amount\.
If \fBm_mem_free_limit_hard\fR is used and \fBm_mem_free\fR requested with a higher value than \fBh_vmem\fR then \fBm_mem_free\fR is
reduced to \fBh_vmem\fR limit\. If \fBm_mem_free\fR is set to a lower value than \fBh_vmem\fR then the kernel ensures that
only \fBm_mem_free\fR main memory is available for the job, when requesting more memory it is automatically taken
from swap space\.
Only when the total memory exceeds the \fBh_vmem\fR limit cgroups will do some action\. If \fBh_vmem\fR is
requested but no \fBm_mem_free\fR then automatically a hard cgroup limit for main memory with the size of \fBh_vmem\fR is
applied, otherwise virtual memory limitation will not work. This is a cgroup limitation\. In this case a \fBmin_memory_limit\fR value
affects \fBh_vmem\fR as well\.
.
.IP \fImin_memory_limit\fP
.
.P
If set to a memory value (like 10M) then each \fBm_mem_free\fR (or \fBh_vmem\fR request, when mixed with \fBm_mem_free\fR) which
restricts the job due with \fBm_mem_free_limit_hard\fR or \fBm_mem_free_limit_soft\fR and which is lower than this value is
automatically increased to the specified min_memory_limit value\. Example: If \fBm_mem_free_limit_hard\fR is enabled and the
job requests 100M but \fBmin_memory_limit\fR is set to 150M then the internal limit for the job (\fImemory\.limit_in_bytes\fR) is
set to 150M\. This does not affect qstat or internal book keeping\.
The parameter is used to solve OS specific issues with too large memory
footprints (shepherd is part of the restriction) of small jobs\. The memory is not multiplied by
amount of slots requested by the job\. The parameter is turned off by setting to 0 or
not setting the parameter at all\. Jobs just requesting cgroups \fBh_vmem\fR without \fBm_mem_free\fR are
not affected\. Here the same limits like for \fBh_vmem\fR are used\.
.
.IP \fIfreezer\fP
.
.P
If set to \fBtrue\fR (or \fB1\fR) it enables the cgroup freezer subsystem for job suspension and resumption\. The freezer subsystem needs to be mounted under \fI$cgroup_path/freezer\fR\. If enabled a job is not longer suspended with the SIGSTOP and resumed with SIGCONT, the job is disabled from being scheduled by the Linux kernel by the freezer subsystem\. There is no signal sent to the job\. The processes are usually put in D state (which is an uninterruptible sleep, like for IO)\. If the job needs to be notified then the \fB\-notify\fR submission option can be used\. The queue configuration can override the cgroups suspension mechanism for certain jobs\. This is done by putting the standard signals in the suspend_method (SIGSTOP) and resume_method (SIGCONT)\. This can be needed for certain job types which relay on signaling\. For tightly integrated jobs only the master task is put into suspend state (the first task regardless \fIJOB_IS_FIRST_TASK\fR is configured in the parallel environment configuration or not)\. If all tasks of a parallel job has to be put in the freezer then \fBfreeze_pe_tasks\fR needs to be activated\. If queue overrides freezer with own signals, \fBfreeze_pe_tasks\fR is set to true, but \fISUSPEND_PE_TASKS\fR (\fBexecd_params\fR) is set to false than slave tasks are not signaled\.
.
.IP \fIfreeze_pe_tasks\fP
.
.P
If set to \fBtrue\fR (or \fB1\fR) and the freezer subsystem is turned on then not only the master task is suspended also all slave tasks of the parallel job are frozen\. If queue overrides freezer with own signals and \fBfreeze_pe_tasks\fR is set to true, but \fISUSPEND_PE_TASKS\fR (\fBexecd_params\fR) is set to false then slave tasks are not signaled\. If \fISUSPEND_PE_TASKS\fR is true (this is the default when not set as \fBexecd_param\fR) then slave tasks are signaled with the overridden queue signal / suspend_method\.
.
.P \fIkilling\fP
.
.P
If set to \fBtrue\fR (or \fB1\fR) the job is killed by using the tasks file of the cpuset subsystem (which when killing is enabled is automatically used for all jobs)\. As long as there are processes in the file the processes are signaled\. This prevents any leftover processes from jobs to be running after the job finished\.
.
.IP \fImount\fP
.
.P
Tries to mount the cgroup subsystems if it is not already mounted to \fI$cgroup_path/\fIsubsystem\fR\fR before a cgroup is created\. If \fI$cgroup_path\fR does not exist an error occurs (it will not tried to be created)\. If the subsystem directory does not exist it will be created\. The subsystem is not unmounted by Grid Engine\. Usually the mounting is done automatically by the operating system when it is started, so this parameter is usually turned off\. Typically (like in RHEL 6) the configuration file for OS auto\-mounting of cgroups is \fI/etc/cgconfig\.conf\fR\.
.
.IP \fIforced_numa\fP
.
.P
When memory binding was requested with \fB\-mbind cores:strict\fR, so that only memory from the NUMA node the job is bound to (by using \fB\-binding\fR) should be taken, then this is set in the cgroups settings \fIcpuset\.mems\fR\. If turned on by setting \fBforced_numa\fR to \fB1\fR or \fBtrue\fR then this limit is ensured by the Linux kernel\. In difference to the traditional memory enforcement the job can not reset the value in order to get memory from other NUMA nodes\.
.\"
.\"
.SS "\fBreporting_params\fP"
Used to define the behavior of reporting modules in the Univa Grid Engine
qmaster. Changes to the \fBreporting_params\fP takes immediate effect.
The following values are recognized:
.\"
.IP "\fIaccounting\fP"
If this parameter is set to true, the accounting file is written.
The accounting file is prerequisite for using the \fBqacct\fP command.
.PP
.IP "\fIreporting\fP"
If this parameter is set to true, the reporting file is written.
The reporting file contains data that can be used for monitoring and analysis,
like job accounting, job log, host load and consumables, queue status and
consumables and sharetree configuration and usage.
Attention: Depending on the size and load of the cluster, the reporting file can
become quite large. Only activate the reporting file if you have a process running that will consume the reporting file!
See
.M reporting 5
for further information about format and contents of the reporting file.
.PP
.IP "\fIflush_time\fP"
Contents of the reporting file are buffered in the
Univa Grid Engine qmaster and flushed at a fixed interval.
This interval can be configured with the \fIflush_time\fP parameter.
It is specified as a time value in the format HH:MM:SS.
Sensible values range from a few seconds to one minute. Setting it too low may
slow down the qmaster. Setting it too high will make the qmaster consume large
amounts of memory for buffering data.
.PP
.IP "\fIaccounting_flush_time\fP"
Contents of the accounting file are buffered in the
Univa Grid Engine qmaster and flushed at a fixed interval.
This interval can be configured with the \fIaccounting_flush_time\fP parameter.
It is specified as a time value in the format HH:MM:SS.
Sensible values range from a few seconds to one minute. Setting it too low may
slow down the qmaster. Setting it too high will make the qmaster consume large
amounts of memory for buffering data.  Setting it to 00:00:00 will disable
accounting data buffering; as soon as data is generated, it will be written to
the accounting file.  If this parameter is not set, the accounting data flush
interval will default to the value of the \fIflush_time\fP parameter.
.PP
.IP "\fIjoblog\fP"
If this parameter is set to true, the reporting file will contain job logging 
information. See
.M reporting 5 
for more information about job logging.
.PP
.IP "\fIsharelog\fP"
The Univa Grid Engine qmaster can dump information about sharetree configuration and use to the reporting file.
The parameter \fIsharelog\fP sets an interval in which sharetree information will be dumped.
It is set in the format HH:MM:SS. A value of 00:00:00 configures qmaster not to
dump sharetree information. Intervals of several minutes up to hours are sensible values for this parameter.
See 
.M reporting 5 
for further information about sharelog.
.PP
.IP "\fIonline_usage\fP"
Online usage information of running jobs (e.g. cpu, mem, vmem, ...) can be written to the
.M reporting 5
file.
Which variables to report is configured as a colon separated list, e.g. \fIonline_usage=cpu:mem:vmem\fP.
.PP
.\"
.\"
.SS "\fBfinished_jobs\fP"
.B Note:
Deprecated, may be removed in future release.
.br
Univa Grid Engine stores a certain number of \fIjust finished\fP jobs to provide
post mortem status information. The \fBfinished_jobs\fP parameter defines the
number of finished jobs stored. If this maximum number is reached, the
eldest finished job will be discarded for every new job added to the
finished job list.
.PP
Changing \fBfinished_jobs\fP will take immediate effect.
The default for \fBfinished_jobs\fP is 100.
.PP
This value is a global configuration parameter only. It cannot be
overwritten by the execution host local configuration.
.\"
.\"
.SS "\fBqlogin_daemon\fP"
This parameter specifies the mechanism that is to be started on the
server side of a
.M qlogin 1 
request. Usually this is the builtin mechanism. It's also possible to
configure an external executable by specifying the full qualified
pathname, e.g. of the system's telnet daemon.
.PP
Changing \fBqlogin_daemon\fP will take immediate effect.
The default value for \fBqlogin_daemon\fP is builtin.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.PP
Examples for the two allowed kinds of attributes are:
.br
qlogin_daemon    builtin
.br
or
.br
qlogin_daemon    /usr/sbin/in.telnetd
.\"
.\"
.SS "\fBqlogin_command\fP"
This is the command to be executed on the client side of a 
.M qlogin 1
request.
Usually this is the builtin qlogin mechanism.
It's also possible to configure an external mechanism, usually the absolute
pathname of the system's telnet client program. It is automatically started
with the target host and port number as parameters.
.PP
Changing \fBqlogin_command\fP will take immediate effect.
The default value for \fBqlogin_command\fP is builtin.
.PP
The global configuration entry for this value
may be overwritten by the execution host local configuration.
.PP
Examples for the two allowed kinds of attributes are:
.br
qlogin_command   builtin
.br
or
.br
qlogin_command   /usr/bin/telnetd
.\"
.\"
.SS "\fBrlogin_daemon\fP"
This parameter specifies the mechanism that is to be started on the server
side of a
.M qrsh 1
request
.B without
a command argument to be executed remotely. 
Usually this is the builtin mechanism. It's also possible to
configure an external executable by specifying the absolute pathname,
e.g. of the system's rlogin daemon. 
.sp 1
Changing
.B rlogin_daemon
will take immediate effect. The default for
.B rlogin_daemon
is builtin.
.sp 1
The global configuration entry for this value may be overwritten by the
execution host local configuration.
.PP
The allowed values are similar to the ones of the examples of
.B qlogin_daemon.
.\"
.\"
.SS "\fBrlogin_command\fP"
This is the mechanism to be executed on the client side of a
.M qrsh 1
request
.B without
a command argument to be executed remotely.
Usually this is the builtin mechanism. If no value is given,
a specialized Univa Grid Engine component is used.
The command is automatically started with the target host and port number 
as parameters.
The Univa Grid Engine rlogin client has been extended
to accept and use the port number argument. You can only use clients, such
as \fIssh\fP, which also understand this syntax.
.sp 1
Changing
.B rlogin_command
will take immediate effect. The default value for
.B rlogin_command
is builtin.
.sp 1
The global configuration entry for this value may be overwritten by the
execution host local configuration.
.PP
In addition to the examples of 
.B qlogin_command
, this value is allowed:
.br
rsh_daemon      none
.\"
.\"
.SS "\fBrsh_daemon\fP"
This parameter specifies the mechanism that is to be started on the server
side of a
.M qrsh 1
request
.B with
a command argument to be executed remotely.
Usually this is the builtin mechanism. If no value is given,
a specialized Univa Grid Engine component is used.
.sp 1
Changing
.B rsh_daemon
will take immediate effect. The default value for
.B rsh_daemon
is builtin.
.sp 1
The global configuration entry for this value may be overwritten by the
execution host local configuration.
.PP
In addition to the examples of 
.B qlogin_daemon
, this value is allowed: 
.br
rsh_daemon      none
.\"
.\"
.SS "\fBrsh_command\fP"
This is the mechanism to be executed on the client side of a
.M qrsh 1
request
.B with
a command argument to be executed remotely.
Usually this is the builtin mechanism.  If no value is given,
a specialized Univa Grid Engine component is used. The command is
automatically started with the target host and port number as parameters
like required for
.M telnet 1
plus the command with its arguments to be
executed remotely. The Univa Grid Engine rsh client has been extended to accept
and use the port number argument. You can only use clients, such as
\fIssh\fP, which also understand this syntax.
.sp 1
Changing
.B rsh_command
will take immediate effect. The default value for
.B rsh_command
is builtin.
.sp 1
The global configuration entry for this value may be overwritten by the
execution host local configuration.
.PP
In addition to the examples of 
.B qlogin_command
, this value is allowed:
.br
rsh_command     none
.\"
.\"
.SS "\fBdelegated_file_staging\fP"
This flag must be set to "true" when the prolog and epilog are ready for
delegated file staging, so that the DRMAA attribute 'drmaa_transfer_files'
is supported. To establish delegated file staging, use the variables 
beginning with "$fs_..." in prolog and epilog to move the input, output 
and error files from one host to the other.
When this flag is set to "false", no file staging is available 
for the DRMAA interface. File staging is currently implemented only via
the DRMAA interface.
When an error occurs while moving the input, output and error files, return 
error code 100 so that the error handling mechanism can handle the error
correctly. (See also FORBID_APPERROR).
.\"
.\"
.SS "\fBreprioritize\fP"
.B Note:
Deprecated, may be removed in future release.
.br
This flag enables or disables the reprioritization of jobs based on their
ticket amount. The \fBreprioritize_interval\fP in 
.M sched_conf 5
takes effect only if \fBreprioritize\fP is set to true. To turn off 
job reprioritization, the \fBreprioritize\fP flag must be set to false 
and the \fBreprioritize_interval\fP to 0 which is the default.
.sp 1
This value is a global configuration parameter only. It cannot be
overridden by the execution host local configuration.
.\"
.\"
.SS "\fBjsv_url\fP"
This setting defines a server JSV instance which will be started and
triggered by the
.M sge_qmaster 8
process. This JSV instance will be used to verify job specifications of
jobs before they are accepted and stored in the internal master database. 
The global configuration entry for this value cannot be overwritten by 
execution host local configurations.
.sp 1
Find more details concerning JSV in 
.M jsv 1
and 
.M sge_request 1 .
.sp 1
The syntax of the \fBjsv_url\fP is specified in 
.M sge_types 1 .
.\"
.\"
.SS "\fBjsv_allowed_mod\fP"
If there is a server JSV script defined with \fBjsv_url\fP parameter, then
all 
.M qalter 1
or
.M qmon 1
modification requests for jobs are rejected by qmaster. With the \fBjsv_allowed_mod\fP
parameter an administrator has the possibility to allow a set of switches which can then
be used with clients to modify certain job attributes. The value for this parameter has to be a
comma separated list of JSV job parameter names as they are documented in
.M qsub 1
or the value \fBnone\fP to indicate that no modification should be allowed. 
Please note that even if \fBnone\fP is specified the switches \fB-w\fP and \fB-t\fP are
allowed for qalter.
.\"
.\"
.SS "\fBlibjvm_path\fP"
\fBlibjvm_path\fP is usually set during qmaster installation and points to the absolute path of libjvm.so.
(or the corresponding library depending on your architecture - e.g. /usr/java/jre/lib/i386/server/libjvm.so) The referenced libjvm version must be at least 1.5.
It is needed by the JVM qmaster thread only. If the Java VM needs additional starting parameters they can be set in \fBadditional_jvm_args\fP. If the JVM thread is started at all can be defined in the 
.M bootstrap 5
file. If libjvm_path is empty or an incorrect path the JVM thread fails to start.
.sp 1
The global configuration entry for this value may be overwritten by the
execution host local configuration.
.\"
.\"
.SS "\fBadditional_jvm_args\fP"
\fBadditional_jvm_args\fP is usually set during qmaster installation.
Details about possible values \fBadditional_jvm_args\fP can be found in the help output of the accompanying Java command. This setting is normally not needed.
.sp 1
The global configuration entry for this value may be overwritten by the
execution host local configuration.
.\"
.\"
.SH "SEE ALSO"
.M sge_intro 1 ,
.M csh 1 ,
.M qconf 1 ,
.M qsub 1 ,
.M jsv 1 ,
.M rsh 1 ,
.M sh 1 ,
.M getpwnam 3 ,
.M drmaa_attributes 3 ,
.M queue_conf 5 ,
.M sched_conf 5 ,
.M sge_types 1 ,
.M sge_execd 8 ,
.M sge_qmaster 8 ,
.M sge_shepherd 8 ,
.M sge_diagnostics 1 ,
.M cron 8 ,
.I Univa Grid Engine Installation and Administration Guide.
.\"
.SH "COPYRIGHT"
See
.M sge_intro 1
for a full statement of rights and permissions.
