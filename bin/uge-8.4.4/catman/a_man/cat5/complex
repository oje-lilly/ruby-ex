COMPLEX(5)                                                          COMPLEX(5)



NNAAMMEE
       complex - Univa Grid Engine complexes configuration file format

DDEESSCCRRIIPPTTIIOONN
       _C_o_m_p_l_e_x reflects the format of the Univa Grid Engine complex configura-
       tion.  The definition of  complex  attributes  provides  all  pertinent
       information concerning the resource attributes a user may request for a
       Univa Grid Engine job via the _q_s_u_b(1) --ll option and for the interpreta-
       tion of these parameters within the Univa Grid Engine system.

       The Univa Grid Engine complex object defines all entries which are used
       for configuring the global, the host, and queue object. The system  has
       a set of pre defined entries, which are assigned to a host or queue per
       default.  In a addition can the user define new entries and assign them
       to one or multiple objects. Each load value has to have its correspond-
       ing complex entry object, which defines the  type  and  the  relational
       operator for it.

   ddeeffiinniinngg rreessoouurrccee aattttrriibbuutteess
       The complex configuration should not be accessed directly.  In order to
       add or modify complex entries, the _q_c_o_n_f(1) options -Mc and -mc  should
       be  used  instead.   While the -Mc option takes a _c_o_m_p_l_e_x configuration
       file as an argument and overrides the current  configuration,  the  -mc
       option bring up an editor filled in with the current _c_o_m_p_l_e_x configura-
       tion.

       The provided list contains all definitions of  resource  attributes  in
       the  system. Adding a new entry means to provide: name, shortcut, type,
       relop, requestable, consumable, default, and urgency.  The  fields  are
       described  below.  Changing one is easily done by updating the field to
       change and removing an entry by deleting its definition.  An  attribute
       can  only  be  removed,  when  it  is not referenced in a host or queue
       object anymore. Also does the system have a  set  of  default  resource
       attributes which are always attached to a host or queue. They cannot be
       deleted nor can the type of such an attribute be changed.


   wwoorrkkiinngg wwiitthh rreessoouurrccee aattttrriibbuutteess
       Before a user can request a resource attribute it has to be attached to
       the  global, host, or cqueue object. The resource attribute exists only
       for the objects, it got attached to ( if it is attached to  the  global
       object(qconf  -me  global),  it exits system wide, host object: only on
       that host (qconf -me NAME): cqueue object: only on that  cqueue  (qconf
       -mq NAME)).

       When  the user attached a resource attribute to an object, one also has
       to assign a value to it; the resource  limit.  Another  way  to  get  a
       resource  attribute value is done by configuring a load sensor for that
       attribute.


   DDeeffaauulltt qquueeuuee rreessoouurrccee aattttrriibbuutteess
       In its default form it contains a selection of parameters in the  queue
       configuration  as  defined  in  _q_u_e_u_e___c_o_n_f(5).  The queue configuration
       parameters being requestable for a job by the user in principal are:

              qname
              hostname
              notify
              calendar
              min_cpu_interval
              tmpdir
              seq_no
              s_rt
              h_rt
              s_cpu
              h_cpu
              s_data
              h_data
              s_stack
              h_stack
              s_core
              h_core
              s_rss
              h_rss

   DDeeffaauulltt hhoosstt rreessoouurrccee aattttrriibbuutteess
       The standard set of host related attributes consists of two categories.
       The  first  category is built by several queue configuration attributes
       which are particularly suitable to be managed on a  host  basis.  These
       attributes are:

              slots
              s_vmem
              h_vmem
              s_fsize
              h_fsize
       (please refer to _q_u_e_u_e___c_o_n_f(5) for details).

       NNoottee:: Defining these attributes in the host complex is no contradiction
       to having them also in the queue configuration. It  allows  maintaining
       the  corresponding  resources on a host level and at the same time on a
       queue level. Total virtual free memory (h_vmem) can be  managed  for  a
       host,  for  example, and a subset of the total amount can be associated
       with a queue on that host.

       The second attribute category in the  standard  host  complex  are  the
       default  load  values  Every  _s_g_e___e_x_e_c_d(8) periodically reports load to
       _s_g_e___q_m_a_s_t_e_r(8).  The reported load values are either the standard Univa
       Grid Engine load values such as the CPU load average (see _u_p_t_i_m_e(1)) or
       load values defined by the Univa Grid Engine  administration  (see  the
       llooaadd__sseennssoorr  parameter in the cluster configuration _s_g_e___c_o_n_f(5) and the
       _U_n_i_v_a _G_r_i_d _E_n_g_i_n_e _I_n_s_t_a_l_l_a_t_i_o_n _a_n_d _A_d_m_i_n_i_s_t_r_a_t_i_o_n _G_u_i_d_e  for  details).
       The  characteristics definition for the standard load values is part of
       the default host  complex,  while  administrator  defined  load  values
       require  extension  of  the  host  complex.  Please  refer  to the file
       <sge_root>/doc/load_parameters.asc  for  detailed  information  on  the
       standard set of load values.

   OOvveerrrriiddiinngg aattttrriibbuutteess
       One  attribute  can  be assigned to the global object, host object, and
       queue object at the same time. On the host level it might get its value
       from  the  user  defined resource limit and a load sensor. In case that
       the attribute is a consumable, we have  in  addition  to  the  resource
       limit  and its load report on host level also the internal usage, which
       the system keeps track of. The merge is done as follows:

       In general an attribute can be overridden on a lower level
          - global by hosts and queues
          - hosts by queues and load values or resource  limits  on  the  same
       level.

       We  have  one  limitation  for overriding attributes based on its rela-
       tional operator:

       !=, == operators can only be overridden on the same level, but not on a
       lower level. The user defined value always overrides the load value.

       >=,  >,  <=,  < operators can only be overridden, when the new value is
       more restrictive than the old one.

       In the case of a consumable on host level, which has also a  load  sen-
       sor,  the  system  checks  for  the  current usage, and if the internal
       accounting is more restrictive than the load sensor report, the  inter-
       nal  value is kept; if the load sensor report is more restrictive, that
       one is kept.

       Note, Univa Grid Engine allows backslashes (\) be used to  escape  new-
       line  (\newline) characters. The backslash and the newline are replaced
       with a space (" ") character before any interpretation.


FFOORRMMAATT
       The principal format of a _c_o_m_p_l_e_x configuration is that of a  tabulated
       list.  Each  line starting with a '#' character is a comment line. Each
       line despite comment lines define one element of the complex. A element
       definition line consists of the following 8 column entries per line (in
       the order of appearance):

   nnaammee
       The name of the complex element to be used to  request  this  attribute
       for  a job in the _q_s_u_b(1) --ll option. A complex attribute name (see _c_o_m_-
       _p_l_e_x___n_a_m_e in _s_g_e___t_y_p_e_s(1)) may appear only once across  all  complexes,
       i.e. the complex attribute definition is unique.

   sshhoorrttccuutt
       A  shortcut  for  nnaammee which may also be used to request this attribute
       for a job in the _q_s_u_b(1) --ll option. An attribute  sshhoorrttccuutt  may  appear
       only  once  across  all  complexes,  so  as to avoid the possibility of
       ambiguous complex attribute references.

   ttyyppee
       This setting determines how the corresponding values are to be  treated
       Univa  Grid Engine internally in case of comparisons or in case of load
       scaling for the load complex entries:

       +o  With IINNTT only raw integers are allowed.

       +o  With DDOOUUBBLLEE floating point numbers in double precision (decimal  and
          scientific notation) can be specified.

       +o  With  TTIIMMEE time specifiers are allowed. Refer to _q_u_e_u_e___c_o_n_f(5) for a
          format description.

       +o  With  MMEEMMOORRYY  memory  size  specifiers   are   allowed.   Refer   to
          _q_u_e_u_e___c_o_n_f(5) for a format description.

       +o  With  BBOOOOLL  the  strings  TRUE and FALSE are allowed. When used in a
          load formula (refer to _s_c_h_e_d___c_o_n_f(5) ) TRUE  and  FALSE  get  mapped
          into '1' and '0'.

       +o  With SSTTRRIINNGG all strings are allowed and is used for wildcard regular
          boolean expression matching.  Please see  _s_g_e___t_y_p_e_s(1)  manpage  for
          eexxpprreessssiioonn definition.

          Examples:
           -l arch="*x*|sol*"  :
                results in "arch=lx-x86" OR "arch=lx-amd64"
                   OR "arch=sol-amd64" OR ...
           -l arch="sol-x??"  :
                results in "arch=sol-x86" OR "arch=sol-x64" OR ...
           -l arch="lx2[246]-x86"  :
                results in "arch=lx22-x86" OR "arch=lx24-x86"
                   OR "arch=lx26-x86"
           -l arch="lx2[4-6]-x86"  :
                results in "arch=lx24-x86" OR "arch=lx25-x86"
                   OR "arch=lx26-x86"
           -l arch="lx2[24-6]-x86"  :
                results in "arch=lx22-x86" OR "arch=lx24-x86"
                   OR "arch=lx25-x86" OR "arch=lx26-x86"
           -l arch="!lx-x86&!sol-amd64"  :
                results in NEITHER "arch=lx-x86" NOR "arch=sol-amd64"
           -l arch="lx2[4|6]-amd64"  :
                results in "arch=lx24-amd64" OR "arch=lx26-amd64"

       +o  CCSSTTRRIINNGG is like SSTTRRIINNGG except comparisons are case insensitive.

       +o  RREESSTTRRIINNGG is like SSTTRRIINNGG and it will be deprecated in the future.

       +o  HHOOSSTT is like CCSSTTRRIINNGG but the expression must match a valid hostname.

       +o  With RRSSMMAAPP requests only integers are allowed. In difference to  IINNTT
          the scheduler selects additionally a specific entity (string) out of
          the string list configured on host level.  This complex type is only
          allowed to be initialized on host level (qconf -me) and not on queue
          level. Further a RRSSMMAAPP complex is only allowed to  be  a  consumable
          and the relation operator must be "<=". This resource type allows to
          configure host resources for which it is required that the job knows
          which  specific  resource of the set has to be accessed.  RSMAP also
          allow to configure topology masks, in order  to  automatically  bind
          RSMAP  ids to specific CPU core on the execution host (see host_conf
          man page).

       +o  For IINNTT, DDOOUUBBLLEE, MMEEMMOORRYY and RRSSMMAAPP consumable requests it is possible
          to  specify  a  range (soft_range) if the consumable is requested by
          using  the  --ssoofftt  option.  Please  see  _s_g_e___t_y_p_e_s(1)  manpage   for
          ssoofftt__rraannggee  definition.  If  a soft request is not grantable the job
          will be dispatched anyway instead of staying in the pending job list
          -  the request is simply ignored. Jobs that are requesting resources
          within the --hhaarrdd section of the submit command have  to  wait  until
          there  are  enough  resources  free and will stay in the pending job
          list.

                 Examples:

                 1) qsub ... -soft -l memory=4K-4G:4K ...

                 Soft request for consumable "memory". Any value between  4096
                 Byte  and  4294967296 Byte that matches the specified step of
                 4096 Byte will be granted if it is available on the resulting
                 hosts which were selected by the scheduler run. The scheduler
                 will select hosts based  on  the  specified  --hhaarrdd  requested
                 resources and on the configured scheduler settings.

                 2) qsub ... -soft -l "memory=4G-8G:1G|1G-4G:500M" ...

                 Soft  request with 2 ranges for consumable "memory". If there
                 is no resource available that provides the big  memory  range
                 (4G-8G)  the  algorithm  will try to find a matching resource
                 for the 2nd specified range.

          It is also possible to request some minimum value for the consumable
          in the --hhaarrdd section and define additionally a higher value or range
          in the --ssoofftt part of the request.

                 Examples:

                 1) qsub ... -soft -l my_double=2.5-8.5:0.1 -hard  -l  my_dou-
                 ble=2.5 ...

                 Soft request with ranges for consumable "my_double" in combi-
                 nation with hard request. The job  will  stay  pending  until
                 there  is  a  minimum of my_double=2.5 available on a host or
                 queue. Once a resource was found the  consumable  might  also
                 consume up to 8.5 - using a range step size of 0.1.

                 1)            qsub           ...           -soft           -l
                 my_int="20-100:2|10-20:1|1-10:1",arch=lx-amd64    -hard    -l
                 my_int=1 ...

                 Soft  request  with 3 ranges for consumable "my_int" and pre-
                 ferred  architecture  "lx-amd64"  in  combination  with  hard
                 request.  The  job will stay pending until there is a minimum
                 of my_int=1 available on a host or queue. In addition to  the
                 "my_int"  consumable also the architecture "lx_amd64" is pre-
                 ferred.

   rreelloopp
       The rreellaattiioonn ooppeerraattoorr..  The relation operator is used  when  the  value
       requested by the user for this parameter is compared against the corre-
       sponding value configured for the considered queues. If the  result  of
       the  comparison  is  false,  the job cannot run in this queue. Possible
       relation operators are "==", "<", ">", "<=", ">=" and "EXCL". The  only
       valid operator for string type attributes is "==".

       The  "EXCL"  relation  operator  implements exclusive scheduling and is
       only valid for consumable boolean type attributes. Exclusive means  the
       result of the comparison is only true if a job requests to be exclusive
       and no other exclusive or non-exclusive jobs uses the complex.  If  the
       job  does  not  request to be exclusive and no other exclusive job uses
       the complex the comparison is also true.

   rreeqquueessttaabbllee
       The entry can be used in a _q_s_u_b(1) resource request if  this  field  is
       set  to  'y' or 'yes'.  If set to 'n' or 'no' this entry cannot be used
       by a user in order to request a queue or a class  of  queues.   If  the
       entry  is set to 'forced' or 'f' the attribute has to be requested by a
       job or it is rejected.

       To enable resource request enforcement the existence  of  the  resource
       has  to  be defined. This can be done on a cluster global, per host and
       per queue basis. The definition of resource availability  is  performed
       with the complex_values entry in _h_o_s_t___c_o_n_f(5) and _q_u_e_u_e___c_o_n_f(5).

   ccoonnssuummaabbllee
       The  ccoonnssuummaabbllee parameter can be set to either 'yes' ('y' abbreviated),
       'no' ('n'), 'JOB' ('j'), or 'HOST' ('h'). It can be set  to  'yes'  and
       'JOB'  only  for numeric attributes (INT, DOUBLE, MEMORY, TIME, RSMAP -
       see ttyyppee above). It can be set to 'HOST' only  for  a  RSMAP  attribute
       (which  must  be initialized on host layer).  If set to 'yes', 'JOB' or
       'HOST' the consumption of the corresponding resource can be managed  by
       Univa  Grid Engine internal bookkeeping. In this case Univa Grid Engine
       accounts for the consumption of this resource for all running jobs  and
       ensures that jobs are only dispatched if the Univa Grid Engine internal
       bookkeeping indicates enough available  consumable  resources.  Consum-
       ables  are an efficient means to manage limited resources such a avail-
       able memory, free space on a file system, network bandwidth or floating
       software licenses.

       A  consumable  defined  by 'y' is a per slot consumable which means the
       limit is multiplied by the number of slots being used by the job before
       being  applied.  In case of 'j' the consumable is a per job consumable.
       This resource is debited as requested (without multiplication) from the
       allocated  master  queue.  The  resource needs not be available for the
       slave task queues.

       A consumable defined by 'HOST' is a per  host  consumable  which  means
       that  the  request  is not multiplied by the number of slots. In case a
       parallel job spans multiple hosts, the resource  request  is  just  one
       time  requested  on  each  host.  Use cases are parallel jobs which are
       requesting co-processor cards, like GPUs or other hardware.  Regardless
       of how many parallel tasks finally run on a host, just the exact amount
       of the (not multiplied by slots) is consumed.

       Consumables can be combined with default or user defined  load  parame-
       ters  (see  _s_g_e___c_o_n_f(5)  and  _h_o_s_t___c_o_n_f(5)),  i.e.  load  values can be
       reported for consumable attributes or the consumable flag  can  be  set
       for  load attributes. The Univa Grid Engine consumable resource manage-
       ment takes both the load (measuring availability of the  resource)  and
       the internal bookkeeping into account in this case, and makes sure that
       neither of both exceeds a given limit.

       To enable consumable resource management the basic  availability  of  a
       resource  has  to be defined. This can be done on a cluster global, per
       host and per queue instance basis while these categories may  supersede
       each other in the given order (i.e. a host can restrict availability of
       a  cluster  resource  and  a  queue  can  restrict  host  and   cluster
       resources).  The  definition of resource availability is performed with
       the ccoommpplleexx__vvaalluueess entry in _h_o_s_t___c_o_n_f(5) and _q_u_e_u_e___c_o_n_f(5).   The  ccoomm--
       pplleexx__vvaalluueess  definition  of  the "global" host specifies cluster global
       consumable settings. To each consumable complex  attribute  in  a  ccoomm--
       pplleexx__vvaalluueess  list  a value is assigned which denotes the maximum avail-
       able amount for that resource. The internal bookkeeping  will  subtract
       from this total the assumed resource consumption by all running jobs as
       expressed through the jobs' resource requests. For  a  "RSMAP"  complex
       type  in  addition  to the amount of resources also the specific string
       instances which are are available for the  jobs  must  be  initialized.
       This  can  only  be  done on host level, it is not allowed to use it on
       queue level.  The format for RSMAP initialization in the complex_values
       field  is  <complexname>=<amount>(<stringlist>), where <complexname> is
       the name of the complex, <amount> is an integer describing the  maximum
       amount  of  resources,  and  <stringlist>  is a space separated list of
       <amount> strings which can be mapped to the jobs.  Additionally  it  is
       possible  to specify a number range in the <stringlist>, like 1-3 which
       is equal to following string list: "1 2 3".

       NNoottee:: Jobs can be forced to request a  resource  and  thus  to  specify
       their  assumed  consumption  via  the  'force' value of the rreeqquueessttaabbllee
       parameter (see above).

       NNoottee aallssoo:: A default resource consumption value can be  pre-defined  by
       the administrator for consumable attributes not explicitly requested by
       the job (see the ddeeffaauulltt parameter below). This is meaningful  only  if
       requesting the attribute is not enforced as explained above.

       See  the  _U_n_i_v_a  _G_r_i_d  _E_n_g_i_n_e _I_n_s_t_a_l_l_a_t_i_o_n _a_n_d _A_d_m_i_n_i_s_t_r_a_t_i_o_n _G_u_i_d_e for
       examples on the usage of the consumable resources facility.

   ddeeffaauulltt
       Meaningful only  for  consumable  complex  attributes  (see  ccoonnssuummaabbllee
       parameter above). Univa Grid Engine assumes the resource amount denoted
       in the ddeeffaauulltt parameter implicitly to be consumed by jobs  being  dis-
       patched  to  a  host  or  queue managing the consumable attribute. Jobs
       explicitly requesting the attribute via the _-_l option to _q_s_u_b(1)  over-
       ride this default value.

   uurrggeennccyy
       The  urgency  value allows influencing job priorities on a per resource
       base. The urgency value effects  the  addend  for  each  resource  when
       determining  the  resource  request  related  urgency contribution. For
       numeric type resource requests the addend is the product of the urgency
       value,  the  jobs  assumed  slot allocation and the per slot request as
       specified via _-_l option to  _q_s_u_b(1).   For  string  type  requests  the
       resources  urgency value is directly used as addend. Urgency values are
       of type real. See under _s_g_e___p_r_i_o_r_i_t_y(5) for an overview on job  priori-
       ties.

   aaaapprree
       The  aapree-attribute (available after preemption) of a complex defines
       if a resource will be reported as available within  Univa  Grid  Engine
       when a job that consumes such a resource is preempted. For all non-con-
       sumable resources it can only be set to NO. For consumables it  can  be
       set  to YES or NO. The aapre-attribute of the slots complex can only be
       set to YES.  After the installation of UGE all memory  based  complexes
       are  defined  as consumable and aapre is also set to YES. As result the
       system will report memory (and slots) as available that are in the pre-
       empted state (P-state).

       NNoottee:: Please note that there are different preemptive actions available
       that can 'preempt' a job. Depending on the preemptive  action  that  is
       applied  to  a  job,  this job might switch into P-state, N-state or S-
       state. For jobs in P-state all used resources where the aapre-attribute
       is  set to true will be reported as available. For the N-state only all
       non-memory based consumables where aapre-attribute is true.  For the S-
       state only the slots consumable will be available.

       Find  more  information concerning preemptive actions and resulting job
       states in _s_g_e___p_r_e_e_m_p_t_i_o_n(5).

SSEEEE AALLSSOO
       _s_g_e___i_n_t_r_o(1),  _s_g_e___t_y_p_e_s(1),  _s_g_e___p_r_e_e_m_p_t_i_o_n(5),   _q_c_o_n_f(1),   _q_s_u_b(1),
       _u_p_t_i_m_e(1), _h_o_s_t___c_o_n_f(5), _q_u_e_u_e___c_o_n_f(5), _s_g_e___e_x_e_c_d(8), _s_g_e___q_m_a_s_t_e_r(8)
       _U_n_i_v_a _G_r_i_d _E_n_g_i_n_e _I_n_s_t_a_l_l_a_t_i_o_n _a_n_d _A_d_m_i_n_i_s_t_r_a_t_i_o_n _G_u_i_d_e_.

CCOOPPYYRRIIGGHHTT
       See _s_g_e___i_n_t_r_o(1) for a full statement of rights and permissions.



Univa Grid Engine File Formats     UGE 8.4.4                        COMPLEX(5)
