SGE_CONF(5)                                                        SGE_CONF(5)



NNAAMMEE
       sge_conf - Univa Grid Engine configuration files

DDEESSCCRRIIPPTTIIOONN
       _s_g_e___c_o_n_f  defines the global and local Univa Grid Engine configurations
       and can be shown/modified by _q_c_o_n_f(1) using the -sconf/-mconf  options.
       Only root or the cluster administrator may modify _s_g_e___c_o_n_f_.

       At  its initial start-up, _s_g_e___q_m_a_s_t_e_r(8) checks to see if a valid Univa
       Grid Engine configuration is available at a well known location in  the
       Univa  Grid  Engine internal directory hierarchy.  If so, it loads that
       configuration information and proceeds.  If not, _s_g_e___q_m_a_s_t_e_r(8)  writes
       a  generic  configuration  containing default values to that same loca-
       tion.  The Univa Grid Engine execution daemons _s_g_e___e_x_e_c_d(8) upon start-
       up retrieve their configuration from _s_g_e___q_m_a_s_t_e_r(8).

       The  actual configuration for both _s_g_e___q_m_a_s_t_e_r(8) and _s_g_e___e_x_e_c_d(8) is a
       superposition of a _g_l_o_b_a_l configuration and a _l_o_c_a_l configuration  per-
       tinent  for the host on which a master or execution daemon resides.  If
       a local configuration is available, its entries  overwrite  the  corre-
       sponding  entries of the global configuration. NNoottee:: The local configu-
       ration does not have to contain all valid  configuration  entries,  but
       only those which need to be modified against the global entries.

       Note:  Univa  Grid Engine allows backslashes (\) be used to escape new-
       line (\newline) characters. The backslash and the newline are  replaced
       with a space (" ") character before any interpretation.

FFOORRMMAATT
       The paragraphs that follow provide brief descriptions of the individual
       parameters that compose the global and local configurations for a Univa
       Grid Engine cluster:

   eexxeeccdd__ssppooooll__ddiirr
       The  execution  daemon  spool  directory  path. Again, a feasible spool
       directory requires read/write access permission for root. The entry  in
       the  global configuration for this parameter can be overwritten by exe-
       cution host local configurations, i.e. each  _s_g_e___e_x_e_c_d(8)  may  have  a
       private  spool  directory with a different path, in which case it needs
       to provide read/write permission for the root  account  of  the  corre-
       sponding execution host only.

       Under  eexxeeccdd__ssppooooll__ddiirr  a directory named corresponding to the unquali-
       fied hostname of the execution host is opened and contains all informa-
       tion  spooled to disk. Thus, it is possible for the eexxeeccdd__ssppooooll__ddiirrs of
       all execution hosts to physically reference  the  same  directory  path
       (the root access restrictions mentioned above need to be met, however).

       Changing the global eexxeeccdd__ssppooooll__ddiirr parameter set at installation  time
       is  not  supported  in  a running system. If the change should still be
       done it is required to restart all affected execution daemons.   Please
       make sure running jobs have finished before doing so, otherwise running
       jobs will be lost.


       The default location  for  the  execution  daemon  spool  directory  is
       $SGE_ROOT/$SGE_CELL/spool.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

   mmaaiilleerr
       mmaaiilleerr is the absolute pathname to the electronic mail  delivery  agent
       on your system. It must accept the following syntax:

              mailer -s <subject-of-mail-message> <recipient>

       Each  _s_g_e___e_x_e_c_d(8)  may  use a private mail agent. Changing mmaaiilleerr will
       take immediate effect.

       The default for mmaaiilleerr depends on the operating system of the  host  on
       which  the Univa Grid Engine master installation was run. Common values
       are /bin/mail or /usr/bin/Mail.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

   xxtteerrmm
       xxtteerrmm  is  the absolute pathname to the X Window System terminal emula-
       tor, _x_t_e_r_m(1).

       Changing xxtteerrmm will take immediate effect.

       The default for xxtteerrmm is /usr/bin/X11/xterm.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

   llooaadd__sseennssoorr
       A  comma separated list of executable shell script paths or programs to
       be started by _s_g_e___e_x_e_c_d(8) and to be used in  order  to  retrieve  site
       configurable load information (e.g. free space on a certain disk parti-
       tion).

       Each _s_g_e___e_x_e_c_d(8) may use a set  of  private  llooaadd__sseennssoorr  programs  or
       scripts.  Changing  llooaadd__sseennssoorr  will take effect after two load report
       intervals (see llooaadd__rreeppoorrtt__ttiimmee)).. AA llooaadd sseennssoorr wwiillll bbee rreessttaarrtteedd aauuttoo--
       mmaattiiccaallllyy  iiff  tthhee ffiillee mmooddiiffiiccaattiioonn ttiimmee ooff tthhee llooaadd sseennssoorr eexxeeccuuttaabbllee
       cchhaannggeess..

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

       In addition to the load sensors configured via llooaadd__sseennssoorr, _s_g_e___e_x_e_c(8)
       searches for an executable file  named  _q_l_o_a_d_s_e_n_s_o_r  in  the  execution
       host's  Univa  Grid  Engine  binary  directory path.  If such a file is
       found, it is treated like the  configurable  load  sensors  defined  in
       llooaadd__sseennssoorr.  This  facility  is  intended for pre-installing a default
       load sensor.

   pprroolloogg
       The executable path of a shell script that is started before  execution
       of Univa Grid Engine jobs with the same environment setting as that for
       the Univa Grid Engine jobs to be started afterwards.  An optional  pre-
       fix  "user@"  specifies  the  user  under which this procedure is to be
       started. The procedures standard output and the error output stream are
       written  to  the  same file used also for the standard output and error
       output of each job.  This procedure is intended  as  a  means  for  the
       Univa  Grid  Engine  administrator to automate the execution of general
       site specific tasks like the preparation of temporary file systems with
       the   need   for  the  same  context  information  as  the  job.   Each
       _s_g_e___e_x_e_c_d(8) may use a private  prolog  script.   Correspondingly,  the
       execution  host local configurations is can be overwritten by the queue
       configuration (see _q_u_e_u_e___c_o_n_f(5) ).  Changing pprroolloogg will take  immedi-
       ate effect.

       The  default  for pprroolloogg is the special value NONE, which prevents from
       execution of a prolog script.

       Scripts where the execution duration would exceed  2  minutes  will  be
       terminated.  This timeout can be adjusted by defining SSCCRRIIPPTT__TTIIMMEEOOUUTT as
       eexxeeccdd__ppaarraammss.

       The following  special  variables  expanded  at  runtime  can  be  used
       (besides  any  other strings which have to be interpreted by the proce-
       dure) to constitute a command line:

       _$_h_o_s_t  The name of the host on which the prolog  or  epilog  procedures
              are started.

       _$_j_o_b___o_w_n_e_r
              The user name of the job owner.

       _$_j_o_b___i_d
              Univa Grid Engine's unique job identification number.

       _$_j_o_b___n_a_m_e
              The name of the job.

       _$_p_r_o_c_e_s_s_o_r_s
              The  pprroocceessssoorrss  string  as contained in the queue configuration
              (see _q_u_e_u_e___c_o_n_f(5)) of the master queue (the queue in which  the
              prolog and epilog procedures are started).

       _$_q_u_e_u_e The  cluster  queue  name of the master queue instance, i.e. the
              cluster queue in which the  prolog  and  epilog  procedures  are
              started.

       _$_s_t_d_i_n___p_a_t_h
              The  pathname  of  the  stdin file. This is always /dev/null for
              prolog, pe_start, pe_stop and epilog. It is the pathname of  the
              stdin  file  for  the job in the job script. When delegated file
              staging is enabled, this path is set to $fs_stdin_tmp_path. When
              delegated  file staging is not enabled, it is the stdin pathname
              given via DRMAA or qsub.

       _$_s_t_d_o_u_t___p_a_t_h

       _$_s_t_d_e_r_r___p_a_t_h
              The pathname of the stdout/stderr file. This  always  points  to
              the  output/error  file. When delegated file staging is enabled,
              this path  is  set  to  $fs_stdout_tmp_path/$fs_stderr_tmp_path.
              When  delegated  file  staging  is  not  enabled, it is the std-
              out/stderr pathname given via DRMAA or qsub.

       _$_m_e_r_g_e___s_t_d_e_r_r
              If merging of stderr and stdout is requested, this flag is  "1",
              otherwise  it  is "0".  If this flag is 1, stdout and stderr are
              merged in one file, the stdout file.  Merging of stderr and std-
              out  can  be  requested  via  the  DRMAA  job template attribute
              'drmaa_join_files' (see _d_r_m_a_a___a_t_t_r_i_b_u_t_e_s(3) ) or the qsub param-
              eter '-j y' (see _q_s_u_b(1) ).

       _$_f_s___s_t_d_i_n___h_o_s_t
              When  delegated  file  staging  is requested for the stdin file,
              this is the name of the host where the  stdin  file  has  to  be
              copied from before the job is started.

       _$_f_s___s_t_d_o_u_t___h_o_s_t

       _$_f_s___s_t_d_e_r_r___h_o_s_t
              When  delegated  file staging is requested for the stdout/stderr
              file, this is the name of the host where the stdout/stderr  file
              has to be copied to after the job has run.

       _$_f_s___s_t_d_i_n___p_a_t_h
              When  delegated  file  staging  is requested for the stdin file,
              this  is  the  pathname  of  the  stdin   file   on   the   host
              $fs_stdin_host.

       _$_f_s___s_t_d_o_u_t___p_a_t_h

       _$_f_s___s_t_d_e_r_r___p_a_t_h
              When  delegated  file staging is requested for the stdout/stderr
              file, this is the pathname of the stdout/stderr file on the host
              $fs_stdout_host/$fs_stderr_host.

       _$_f_s___s_t_d_i_n___t_m_p___p_a_t_h
              When  delegated  file  staging  is requested for the stdin file,
              this is the destination pathname of the stdin file on the execu-
              tion  host.  The  prolog  script  must  copy the stdin file from
              $fs_stdin_host:$fs_stdin_path to localhost:$fs_stdin_tmp_path to
              establish delegated file staging of the stdin file.

       _$_f_s___s_t_d_o_u_t___t_m_p___p_a_t_h

       _$_f_s___s_t_d_e_r_r___t_m_p___p_a_t_h
              When  delegated  file staging is requested for the stdout/stderr
              file, this is the source pathname of the stdout/stderr  file  on
              the  execution host. The epilog script must copy the stdout file
              from localhost:$fs_stdout_tmp_path  to  $fs_stdout_host:$fs_std-
              out_path  (the stderr file from localhost:$fs_stderr_tmp_path to
              $fs_stderr_host:$fs_stderr_path)  to  establish  delegated  file
              staging of the stdout/stderr file.

       _$_f_s___s_t_d_i_n___f_i_l_e___s_t_a_g_i_n_g

       _$_f_s___s_t_d_o_u_t___f_i_l_e___s_t_a_g_i_n_g

       _$_f_s___s_t_d_e_r_r___f_i_l_e___s_t_a_g_i_n_g
              When  delegated  file  staging  is  requested for the stdin/std-
              out/stderr file, the flag is set to "1", otherwise it is set  to
              "0"  (see in ddeelleeggaatteedd__ffiillee__ssttaaggiinngg how to enable delegated file
              staging).

              These three flags correspond to the DRMAA job template attribute
              'drmaa_transfer_files' (see _d_r_m_a_a___a_t_t_r_i_b_u_t_e_s(3) ).

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

       Exit codes for the prolog attribute can be  interpreted  based  on  the
       following exit values:
              0: Success
              99: Reschedule job
              100: Put job in error state
              Anything else: Put queue in error state

   eeppiilloogg
       The  executable  path of a shell script that is started after execution
       of Univa Grid Engine jobs with the same environment setting as that for
       the  Univa Grid Engine jobs that has just completed. An optional prefix
       "user@" specifies the user under which this procedure is to be started.
       The  procedures standard output and the error output stream are written
       to the same file used also for the standard output and error output  of
       each  job.   This  procedure  is intended as a means for the Univa Grid
       Engine administrator to automate the execution of general site specific
       tasks  like the cleaning up of temporary file systems with the need for
       the same context information as the job.  Each _s_g_e___e_x_e_c_d(8) may  use  a
       private  epilog script.  Correspondingly, the execution host local con-
       figurations is can be  overwritten  by  the  queue  configuration  (see
       _q_u_e_u_e___c_o_n_f(5) ).  Changing eeppiilloogg will take immediate effect.

       The  default  for eeppiilloogg is the special value NONE, which prevents from
       execution of a epilog script.  The  same  special variables as for pprroo--
       lloogg can be used to constitute a command line.

       Scripts  where  the  execution  duration would exceed 2 minutes will be
       terminated. This timeout can be adjusted by defining SSCCRRIIPPTT__TTIIMMEEOOUUTT  as
       eexxeeccdd__ppaarraammss.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

       Exit codes for the epilog attribute can be  interpreted  based  on  the
       following exit values:
              0: Success
              99: Reschedule job
              100: Put job in error state
              Any  other  value  <= 127: Put queue in error state, requeue the
              job
              Any value > 127: If RREESSCCHHEEDDUULLEE__OONN__KKIILLLLEEDD__EEPPIILLOOGG is set to "true"
              or "1", the queue is put in error state, the job is requeued. If
              this parameter is set to "false" or "0",  the  job  simply  fin-
              ishes.

   sshheellll__ssttaarrtt__mmooddee
       NNoottee:: Deprecated, may be removed in future release.
       This parameter defines the mechanisms which are used to actually invoke
       the job scripts on the execution hosts. The following values are recog-
       nized:

       _u_n_i_x___b_e_h_a_v_i_o_r
              If  a user starts a job shell script under UNIX interactively by
              invoking it just with the script  name  the  operating  system's
              executable  loader  uses  the  information provided in a comment
              such as `#!/bin/csh' in the first line of the script  to  detect
              which command interpreter to start to interpret the script. This
              mechanism is used by Univa Grid Engine  when  starting  jobs  if
              _u_n_i_x___b_e_h_a_v_i_o_r is defined as sshheellll__ssttaarrtt__mmooddee.

       _p_o_s_i_x___c_o_m_p_l_i_a_n_t
              POSIX  does  not  consider  first  script  line  comments such a
              `#!/bin/csh' as significant. The POSIX standard for batch  queu-
              ing  systems  (P1003.2d)  therefore requires a compliant queuing
              system to ignore such lines but to use user specified or config-
              ured    default   command   interpreters   instead.   Thus,   if
              sshheellll__ssttaarrtt__mmooddee is set to  _p_o_s_i_x___c_o_m_p_l_i_a_n_t  Univa  Grid  Engine
              will  either  use  the  command  interpreter indicated by the --SS
              option of the _q_s_u_b(1) command or  the  sshheellll  parameter  of  the
              queue to be used (see _q_u_e_u_e___c_o_n_f(5) for details).

       _s_c_r_i_p_t___f_r_o_m___s_t_d_i_n
              Setting the sshheellll__ssttaarrtt__mmooddee parameter either to _p_o_s_i_x___c_o_m_p_l_i_a_n_t
              or _u_n_i_x___b_e_h_a_v_i_o_r requires you  to  set  the  umask  in  use  for
              _s_g_e___e_x_e_c_d(8)  such  that  every  user  has  read  access  to the
              active_jobs directory in the spool directory of the  correspond-
              ing execution daemon. In case you have pprroolloogg and eeppiilloogg scripts
              configured, they also need to be readable by any  user  who  may
              execute jobs.
              If  this  violates your site's security policies you may want to
              set sshheellll__ssttaarrtt__mmooddee to _s_c_r_i_p_t___f_r_o_m___s_t_d_i_n. This will force Univa
              Grid  Engine  to  open  the job script as well as the epilog and
              prolog scripts for reading into STDIN as root  (if  _s_g_e___e_x_e_c_d(8)
              was  started  as  root)  before changing to the job owner's user
              account.  The script is then fed into the STDIN  stream  of  the
              command  interpreter  indicated  by the --SS option of the _q_s_u_b(1)
              command or the sshheellll parameter of the  queue  to  be  used  (see
              _q_u_e_u_e___c_o_n_f(5) for details).
              Thus  setting sshheellll__ssttaarrtt__mmooddee to _s_c_r_i_p_t___f_r_o_m___s_t_d_i_n also implies
              _p_o_s_i_x___c_o_m_p_l_i_a_n_t behavior. NNoottee, however,  that  feeding  scripts
              into the STDIN stream of a command interpreter may cause trouble
              if commands like _r_s_h(1) are invoked inside a job script as  they
              also  process the STDIN stream of the command interpreter. These
              problems can usually be resolved by redirecting the STDIN  chan-
              nel of those commands to come from /dev/null (e.g. rsh host date
              < /dev/null). NNoottee aallssoo, that any command-line  options  associ-
              ated  with  the job are passed to the executing shell. The shell
              will only forward them to the job if they are not recognized  as
              valid shell options.

       Changes  to  sshheellll__ssttaarrtt__mmooddee  will take immediate effect.  The default
       for sshheellll__ssttaarrtt__mmooddee is _u_n_i_x___b_e_h_a_v_i_o_r.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   llooggiinn__sshheellllss
       UNIX  command  interpreters like the Bourne-Shell (see _s_h(1)) or the C-
       Shell (see _c_s_h(1)) can be used  by  Univa  Grid  Engine  to  start  job
       scripts. The command interpreters can either be started as login-shells
       (i.e. all system and user default resource files like .login  or  .pro-
       file  will  be executed when the command interpreter is started and the
       environment for the job will be set up as if the user has  just  logged
       in)  or  just  for command execution (i.e. only shell specific resource
       files like .cshrc will be executed and a minimal default environment is
       set up by Univa Grid Engine - see _q_s_u_b(1)).  The parameter llooggiinn__sshheellllss
       contains a comma separated list of the executable names of the  command
       interpreters  to  be  started as login-shells.  Shells in this list are
       only started as login shells if  the  parameter  sshheellll__ssttaarrtt__mmooddee  (see
       above) is set to _p_o_s_i_x___c_o_m_p_l_i_a_n_t.

       Changes  to  llooggiinn__sshheellllss  will take immediate effect.  The default for
       llooggiinn__sshheellllss is sh,bash,csh,tcsh,ksh.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   mmiinn__uuiidd
       mmiinn__uuiidd  places  a  lower  bound  on user IDs that may use the cluster.
       Users whose user ID (as returned by _g_e_t_p_w_n_a_m(3)) is less  than  mmiinn__uuiidd
       will not be allowed to run jobs on the cluster.

       Changes to mmiinn__uuiidd will take immediate effect.  The default for mmiinn__uuiidd
       is 0.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   mmiinn__ggiidd
       This parameter sets the lower bound on group IDs that may use the clus-
       ter.  Users whose default group ID (as returned by _g_e_t_p_w_n_a_m(3)) is less
       than mmiinn__ggiidd will not be allowed to run jobs on the cluster.

       Changes to mmiinn__ggiidd will take immediate effect.  The default for mmiinn__ggiidd
       is 0.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   uusseerr__lliissttss
       The uusseerr__lliissttss parameter contains a comma separated list of user access
       lists as described in _a_c_c_e_s_s___l_i_s_t(5).  Each user contained in at  least
       one  of  the  enlisted  access  lists has access to the cluster. If the
       uusseerr__lliissttss parameter is set to NONE (the default) any user  has  access
       not  explicitly excluded via the xxuusseerr__lliissttss parameter described below.
       If a user is contained both in an access list enlisted  in  xxuusseerr__lliissttss
       and uusseerr__lliissttss the user is denied access to the cluster.

       Changes to uusseerr__lliissttss will take immediate effect

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   xxuusseerr__lliissttss
       The xxuusseerr__lliissttss parameter contains  a  comma  separated  list  of  user
       access lists as described in _a_c_c_e_s_s___l_i_s_t(5).  Each user contained in at
       least one of the enlisted access lists is denied access to the cluster.
       If  the xxuusseerr__lliissttss parameter is set to NONE (the default) any user has
       access.  If a user is contained both in  an  access  list  enlisted  in
       xxuusseerr__lliissttss and uusseerr__lliissttss (see above) the user is denied access to the
       cluster.

       Changes to xxuusseerr__lliissttss will take immediate effect

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   aaddmmiinniissttrraattoorr__mmaaiill
       aaddmmiinniissttrraattoorr__mmaaiill  specifies  a comma separated list of the electronic
       mail address(es) of the cluster administrator(s)  to  whom  internally-
       generated  problem reports are sent. The mail address format depends on
       your electronic mail system and how it is configured; consult your sys-
       tem's configuration guide for more information.

       Changing  aaddmmiinniissttrraattoorr__mmaaiill  takes  immediate effect.  The default for
       aaddmmiinniissttrraattoorr__mmaaiill is an empty mail list.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   pprroojjeeccttss
       The pprroojjeeccttss list contains all projects which a job can be submitted to
       or pending jobs can be altered to. If the  pprroojjeeccttss  list  is  defined,
       only  jobs  which are submitted or altered to one of these projects are
       accepted by Univa Grid Engine, all other  jobs  are  rejected.  If  the
       pprroojjeeccttss list is not defined (i.e. it is "none"), jobs are not rejected
       because of their project membership.

       Changing pprroojjeeccttss takes immediate  effect.  Changing  pprroojjeeccttss  doesn't
       affect  pending  or running jobs, except for altering them. The default
       for pprroojjeeccttss is none.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   xxpprroojjeeccttss
       The xxpprroojjeeccttss list contains all projects which a job can not be submit-
       ted to or pending job can not be altered to. If the xxpprroojjeeccttss  list  is
       defined,  all  jobs  that  are  submitted  or  altered  to one of these
       projects are rejected by Univa Grid Engine,  all  other  jobs  are  not
       rejected.  If  the  xxpprroojjeeccttss  list is not defined (i.e. it is "none"),
       jobs are not rejected because of the project membership.

       Changing xxpprroojjeeccttss takes immediate effect. Changing  xxpprroojjeeccttss  doesn't
       affect  pending  or running jobs, except for altering them. The default
       for xxpprroojjeeccttss is none.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   llooaadd__rreeppoorrtt__ttiimmee
       System  load  is  reported  periodically  by  the  execution daemons to
       _s_g_e___q_m_a_s_t_e_r(8).  The parameter llooaadd__rreeppoorrtt__ttiimmee defines the time inter-
       val between load reports.

       Each  _s_g_e___e_x_e_c_d(8)  may  use  a  different  load  report time. Changing
       llooaadd__rreeppoorrtt__ttiimmee will take immediate effect.

       NNoottee:: Be careful when modifying llooaadd__rreeppoorrtt__ttiimmee.  Reporting  load  too
       frequently  might block _s_g_e___q_m_a_s_t_e_r(8) especially if the number of exe-
       cution hosts is  large.  Moreover,  since  the  system  load  typically
       increases  and  decreases  smoothly, frequent load reports hardly offer
       any benefit.

       The default for llooaadd__rreeppoorrtt__ttiimmee is 40 seconds.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.


   ggddii__rreeqquueesstt__lliimmiittss
       This  parameter  can be used to define a maximum number of requests per
       second that _s_g_e___q_m_a_s_t_e_r(1)  will  accept  before  it  starts  rejecting
       incoming requests. The value _N_O_N_E, which is the default for this param-
       eter, means that all valid  requests  that  will  be  received  by  the
       _s_g_e___q_m_a_s_t_e_r(1)  process  will  also be answered. Incoming requests that
       can not immediately be answered will be stored in request queues till a
       thread  is  available  to handle the request and send a response to the
       client.

       Instead of _N_O_N_E a comma separated list of limit rules can be specified.
       A  limit  rule  consist of a set of filters and a number that expresses
       how many requests per second are allowed for those requests that  match
       the  corresponding  filters.  There  are filters for the request source
       (name of the command line client), request type (ADD, MOD,  DEL,  GET),
       object  type  that  should be addressed by the request (e.g. JOB, CLUS-
       TER_QUEUE, JOB_CLASS, ...), users  that  triggered  the  request  (user
       name)  and  the  hostname of the host where the request is coming from.
       For each part of such a filter expression it is allowed to specify  "*"
       so that the corresponding part of that expression will match any incom-
       ing request.

       The full syntax for this parameter is as follows:

       gdi_request_limits ::=
          "NONE" | limit_rule [ "," limit_rule ]* .
       limit_rule ::=
          source ":" request_type ":" obj_type ":" user
          "=" max_requests .
       source ::=
          "*" | "drmaa" | "qacct" | "qalter" | "qsub" | "qsh" | "qlogin" |
          "qrsh" | "qconf" | "qdel" | "qhost" | "qmod" | "qquota" |
          "qmon" | "qrdel" | "qrstat" | "qrsub" | "qselect" | "qstat" .
       request_type ::=
          "*" | "ADD" | "MOD" | "DEL" | "GET" .
       obj_type ::=
          "*" | "JOB" | "ADMIN_HOST" | "SUBMIT_HOST" | "EXEC_HOST" |
          "CLUSTER_QUEUE" | "CPLX_ENTRY" | "CONFIG" | "MANAGER" |
          "OPERATOR" | "PARALLEL_ENV" | "SCHED_CONFIG" | "USER" |
          "USER_SET" | "PROJECT" | "SHARETREE_NODE" | "CKPT_ENV" |
          "CALENDAR" | "HOST_GROUP" | "RESOURCE_QUOTA" |
          "ADVANCE_RESERVATION" | "RESOURCE_RESERVATION" | "JOB_CLASS" |
          "SESSION" | "CLUSTER" | "LICENSE_MANAGER" .
       user ::= "*" | <<user_name>> .
       hostname ::= "*" | <<hostname>> .
       max_requests ::= <<value_>=_1>> .

       If multiple limit rules are defined then all of  them  are  taken  into
       account,  i.e.  none  of  the  maximum values defined in those rules is
       allowed to be exceeded. Requests that are not accepted will be rejected
       with an error message that shows the first limit rule that rejected the
       request. Limit rules will be tested in the order in that they appear.

       Example: qsub:ADD:JOB:peter:*=400,qstat:GET:JOB:*:*=400,
                qstat:GET:JOB:*:poipu=10

       The example above will limit the number of job  submissions  (done  via
       _q_s_u_b(1)  for  the user named peter to a maximum of 400 submits per sec-
       ond.

       The second and third limit rule limits  the  number  of  qstat  job-get
       requests  for all users on all hosts to 400 and to 10 for such requests
       that are received from the host poipu.  This  means  _q_s_t_a_t(1)  commands
       that  will show job related information (like qqssttaatt --ff,, qqssttaatt --jj,, qqssttaatt
       --eexxtt,, ...) might get rejected if those limits get exceeded.  Also  com-
       mands  might  get  rejected  that  do  not  show jobs directly but that
       require job information to generate the output (like qqssttaatt --ggcc -> which
       shows the used job slots of queues).

       ggddii__rreeqquueesstt__lliimmiitt    replaces    the    functionality    provided    by
       ggddii__mmuullttii__rreeaadd__rreeqq. ggddii__mmuullttii__rreeaadd__rreeqq is deprecated since  Univa  Grid
       Engine 8.2.

   rreesscchheedduullee__uunnkknnoowwnn
       Determines  whether  jobs on hosts in unknown state are rescheduled and
       thus sent to other hosts. Hosts are registered as unknown  if  _s_g_e___m_a_s_-
       _t_e_r(8) cannot establish contact to the _s_g_e___e_x_e_c_d(8) on those hosts (see
       mmaaxx__uunnhheeaarrdd ). Likely reasons are a breakdown of the host or  a  break-
       down  of  the  network connection in between, but also _s_g_e___e_x_e_c_d(8) may
       not be executing on such hosts.

       In any case, Univa Grid Engine can  reschedule  jobs  running  on  such
       hosts  to  another  system.  rreesscchheedduullee__uunnkknnoowwnn controls the time which
       Univa Grid Engine will wait before jobs are rescheduled  after  a  host
       became  unknown. The time format specification is hh:mm:ss. If the spe-
       cial value 00:00:00 is set, then jobs will not be rescheduled from this
       host.

       Rescheduling  is only initiated for jobs which have activated the rerun
       flag (see  the  --rr  yy  option  of  _q_s_u_b(1)  and  the  rreerruunn  option  of
       _q_u_e_u_e___c_o_n_f(5)).   Parallel  jobs  are  only  rescheduled if the host on
       which their master task executes is in unknown state. The  behavior  of
       rreesscchheedduullee__uunnkknnoowwnn  for  parallel  jobs  and for jobs without the rerun
       flag  be  set  can  be  adjusted  using  the  qqmmaasstteerr__ppaarraammss   settings
       EENNAABBLLEE__RREESSCCHHEEDDUULLEE__KKIILLLL and EENNAABBLLEE__RREESSCCHHEEDDUULLEE__SSLLAAVVEE..

       Checkpointing jobs will only be rescheduled when the wwhheenn option of the
       corresponding checkpointing environment contains an  appropriate  flag.
       (see  _c_h_e_c_k_p_o_i_n_t(5)).  Interactive jobs (see _q_s_h(1), _q_r_s_h(1), _q_t_c_s_h(1))
       are not rescheduled.

       The default for rreesscchheedduullee__uunnkknnoowwnn is 00:00:00

       The global configuration entry for this value may be  over  written  by
       the execution host local configuration.

   mmaaxx__uunnhheeaarrdd
       If  _s_g_e___q_m_a_s_t_e_r(8) could not contact or was not contacted by the execu-
       tion daemon of a host for mmaaxx__uunnhheeaarrdd seconds, all queues  residing  on
       that  particular  host  are  set to status unknown.  _s_g_e___q_m_a_s_t_e_r(8), at
       least, should be contacted by the execution daemons in order to get the
       load   reports.   Thus,   mmaaxx__uunnhheeaarrdd   should   by  greater  than  the
       llooaadd__rreeppoorrtt__ttiimmee (see above).

       Changing  mmaaxx__uunnhheeaarrdd  takes  immediate  effect.    The   default   for
       mmaaxx__uunnhheeaarrdd is 5 minutes.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   lloogglleevveell
       This parameter specifies the level of detail  that  Univa  Grid  Engine
       components such as _s_g_e___q_m_a_s_t_e_r(8) or _s_g_e___e_x_e_c_d(8) use to produce infor-
       mative, warning or error messages which  are  logged  to  the  _m_e_s_s_a_g_e_s
       files  in  the  master  and execution daemon spool directories (see the
       description of the eexxeeccdd__ssppooooll__ddiirr parameter above). The following mes-
       sage levels are available:

       _l_o_g___e_r_r
              All error events being recognized are logged.

       _l_o_g___w_a_r_n_i_n_g
              All  error  events  being  recognized  and all detected signs of
              potentially erroneous behavior are logged.

       _l_o_g___i_n_f_o
              All error events being recognized, all detected signs of  poten-
              tially  erroneous behavior and a variety of informative messages
              are logged.

       Changing lloogglleevveell will take immediate effect.

       The default for lloogglleevveell is _l_o_g___w_a_r_n_i_n_g.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   mmaaxx__aajj__iinnssttaanncceess
       This parameter defines the maximum amount of array task to be scheduled
       to run simultaneously per array job.  An instance of an array task will
       be created within the master daemon when it gets a start order from the
       scheduler. The instance will be destroyed when the array task finishes.
       Thus  the parameter provides control mainly over the memory consumption
       of array jobs in the master and scheduler daemon. It is most useful for
       very  large  clusters  and very large array jobs.  The default for this
       parameter is 2000. The value 0 will  deactivate  this  limit  and  will
       allow  the  scheduler  to  start  as  many  array job tasks as suitable
       resources are available in the cluster.

       Changing mmaaxx__aajj__iinnssttaanncceess will take immediate effect.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   mmaaxx__aajj__ttaasskkss
       This  parameter defines the maximum number of array job tasks within an
       array job.  _s_g_e___q_m_a_s_t_e_r(8) will reject all array job submissions  which
       request  more  than  mmaaxx__aajj__ttaasskkss array job tasks. The default for this
       parameter is 75000. The value 0 will deactivate this limit.

       Changing mmaaxx__aajj__ttaasskkss will take immediate effect.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   mmaaxx__uu__jjoobbss
       The  number  of active (not finished) jobs which each Univa Grid Engine
       user can have in the system simultaneously is controlled by this param-
       eter.  A  value  greater  than 0 defines the limit. The default value 0
       means "unlimited". If the mmaaxx__uu__jjoobbss limit is exceeded by a job submis-
       sion  then  the  submission  command  exits  with exit status 25 and an
       appropriate error message.

       Changing mmaaxx__uu__jjoobbss will take immediate effect.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   mmaaxx__jjoobbss
       The  number  of  active  (not  finished) jobs simultaneously allowed in
       Univa Grid Engine is controlled by this parameter. A value greater than
       0  defines  the  limit.   The default value 0 means "unlimited". If the
       mmaaxx__jjoobbss limit is exceeded by a job submission then the submission com-
       mand exits with exit status 25 and an appropriate error message.

       Changing mmaaxx__jjoobbss will take immediate effect.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   mmaaxx__aaddvvaannccee__rreesseerrvvaattiioonnss
       The number of active (not finished) Advance Reservations simultaneously
       allowed  in  Univa Grid Engine is controlled by this parameter. A value
       greater than 0 defines the limit. The default  value  0  means  "unlim-
       ited".  If the mmaaxx__aaddvvaannccee__rreesseerrvvaattiioonnss limit is exceeded by an Advance
       Reservation request then the submission command exits with exit  status
       25 and an appropriate error message.

       Changing mmaaxx__aaddvvaannccee__rreesseerrvvaattiioonnss will take immediate effect.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   eennffoorrccee__pprroojjeecctt
       If set to _t_r_u_e, users are required to request a project  whenever  sub-
       mitting a job. See the --PP option to _q_s_u_b(1) for details.

       Changing  eennffoorrccee__pprroojjeecctt  will take immediate effect.  The default for
       eennffoorrccee__pprroojjeecctt is _f_a_l_s_e.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   eennffoorrccee__jjcc
       If set to _t_r_u_e, users are required to specify a job class whenever sub-
       mitting a job. Default value for this parameter is _f_a_l_s_e.  Manager  can
       define  a  default job class with the ddeeffaauulltt__jjcc parameter of this con-
       figuration. This allows to define a fallback job  class  that  will  be
       automatically used if the user does not specify a job class.


   ddeeffaauulltt__jjcc
       This  parameter  allows  to  specify  a  job class that will be used as
       default for each submitted job if the user itself does  not  request  a
       certain job class. Default for this parameter is _N_O_N_E.

   eennffoorrccee__uusseerr
       If  set to _t_r_u_e,, aa _u_s_e_r(5) must exist to allow for job submission. Jobs
       are rejected if no corresponding user exists.

       If set to _a_u_t_o,, aa _u_s_e_r(5) object for the submitting user will automati-
       cally  be created during job submission, if one does not already exist.
       The aauuttoo__uusseerr__oottiicckkeett, aauuttoo__uusseerr__ffsshhaarree, aauuttoo__uusseerr__ddeeffaauulltt__pprroojjeecctt, and
       aauuttoo__uusseerr__ddeelleettee__ttiimmee  configuration parameters will be used as default
       attributes of the new _u_s_e_r(5) object.

       Changing eennffoorrccee__uusseerr will take  immediate  effect.   The  default  for
       eennffoorrccee__uusseerr is _a_u_t_o.


       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   aauuttoo__uusseerr__oottiicckkeett
       The number of override  tickets  to  assign  to  automatically  created
       _u_s_e_r(5)   objects.  User  objects  are  created  automatically  if  the
       eennffoorrccee__uusseerr attribute is set to _a_u_t_o.

       Changing aauuttoo__uusseerr__oottiicckkeett will affect any newly created user  objects,
       but will not change user objects created in the past.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   aauuttoo__uusseerr__ffsshhaarree
       The number of functional shares  to  assign  to  automatically  created
       _u_s_e_r(5)   objects.  User  objects  are  created  automatically  if  the
       eennffoorrccee__uusseerr attribute is set to _a_u_t_o.

       Changing aauuttoo__uusseerr__ffsshhaarree will affect any newly created  user  objects,
       but will not change user objects created in the past.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   aauuttoo__uusseerr__ddeeffaauulltt__pprroojjeecctt
       The default project to assign to automatically created _u_s_e_r(5) objects.
       User objects are created automatically if the eennffoorrccee__uusseerr attribute is
       set to _a_u_t_o.

       Changing aauuttoo__uusseerr__ddeeffaauulltt__pprroojjeecctt will affect any newly  created  user
       objects, but will not change user objects created in the past.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   aauuttoo__uusseerr__ddeelleettee__ttiimmee
       The number of seconds of inactivity after which  automatically  created
       _u_s_e_r(5) objects will be deleted. User objects are created automatically
       if the eennffoorrccee__uusseerr attribute is set to _a_u_t_o. If the user has no active
       or pending jobs for the specified amount of time, the object will auto-
       matically be deleted.  A value of 0 can be used to  indicate  that  the
       automatically  created user object is permanent and should not be auto-
       matically deleted.

       Changing aauuttoo__uusseerr__ddeelleettee__ttiimmee will affect the deletion  time  for  all
       users with active jobs.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   sseett__ttookkeenn__ccmmdd
       NNoottee:: Deprecated, may be removed in future release.
       This parameter is only present if your  Univa  Grid  Engine  system  is
       licensed to support AFS.

       SSeett__ttookkeenn__ccmmdd points to a command which sets and extends AFS tokens for
       Univa Grid Engine jobs. In the standard Univa Grid Engine AFS distribu-
       tion, it is supplied as a script which expects two command line parame-
       ters. It reads the token from STDIN,  extends  the  token's  expiration
       time and sets the token:

              <set_token_cmd> <user> <token_extend_after_seconds>

       As a shell script this command will call the programs:

              - SetToken
              - forge

       which are provided by your distributor as source code. The script looks
       as follows:

              --------------------------------
              #!/bin/sh
              # set_token_cmd
              forge -u $1 -t $2 | SetToken
              --------------------------------

       Since it is necessary for _f_o_r_g_e to read the secret AFS  server  key,  a
       site might wish to replace the sseett__ttookkeenn__ccmmdd script by a command, which
       connects to a custom daemon at the AFS server. The token must be forged
       at  the AFS server and returned to the local machine, where _S_e_t_T_o_k_e_n is
       executed.

       Changing sseett__ttookkeenn__ccmmdd will take immediate  effect.   The  default  for
       sseett__ttookkeenn__ccmmdd is none.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

   ppaagg__ccmmdd
       NNoottee:: Deprecated, may be removed in future release.
       This parameter is only present if your  Univa  Grid  Engine  system  is
       licensed to support AFS.

       The  path to your _p_a_g_s_h iiss ssppeecciiffiieedd vviiaa tthhiiss ppaarraammeetteerr..  TThhee _s_g_e___s_h_e_p_-
       _h_e_r_d(8) process and the job run in a _p_a_g_s_h. Please ask your AFS  admin-
       istrator for details.

       Changing  ppaagg__ccmmdd  will take immediate effect.  The default for ppaagg__ccmmdd
       is none.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

   ttookkeenn__eexxtteenndd__ttiimmee
       NNoottee:: Deprecated, may be removed in future release.
       This  parameter  is  only  present  if your Univa Grid Engine system is
       licensed to support AFS.

       The ttookkeenn__eexxtteenndd__ttiimmee is the time period for which AFS tokens are peri-
       odically  extended.  Univa Grid Engine will call the token extension 30
       minutes before the tokens expire until jobs have finished and the  cor-
       responding tokens are no longer required.

       Changing ttookkeenn__eexxtteenndd__ttiimmee will take immediate effect.  The default for
       ttookkeenn__eexxtteenndd__ttiimmee is 24:0:0, i.e. 24 hours.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

   sshheepphheerrdd__ccmmdd
       Alternative path to the sshheepphheerrdd__ccmmdd binary. Typically used to call the
       shepherd binary by a wrapper script or command.

       Changing sshheepphheerrdd__ccmmdd will take immediate effect. The default for sshheepp--
       hheerrdd__ccmmdd is none.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

   ggiidd__rraannggee
       The ggiidd__rraannggee is a comma separated list of  range  expressions  of  the
       form  n-m (n as well as m are integer numbers greater than 99), where m
       is an abbreviation for m-m. These numbers are used in  _s_g_e___e_x_e_c_d(8)  to
       identify processes belonging to the same job.

       Each _s_g_e___e_x_e_c_d(8) may use a separate set up group ids for this purpose.
       All number in the group id range have to be unused supplementary  group
       ids on the system, where the _s_g_e___e_x_e_c_d(8) is started.

       Changing ggiidd__rraannggee will take immediate effect.  There is no default for
       ggiidd__rraannggee. The administrator will have to assign a value for  ggiidd__rraannggee
       during installation of Univa Grid Engine.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

   qqmmaasstteerr__ppaarraammss
       A list of additional parameters can be passed to the Univa Grid  Engine
       qmaster. The following values are recognized:

       _A_L_L_O_W___I_N_C_R_E_A_S_E___P_O_S_I_X___P_R_I_O_R_I_T_Y
              If  this  parameter is set then the POSIX priority of jobs might
              be increased by users up to level 0 for their own jobs  even  if
              they  do  not  have  the  operator  or manager role.  In case of
              absence of this parameter users are only allowed to decrease the
              priority  of  their  jobs  whereas  operators and managers might
              increase/decrease the priority of jobs independent of the owner-
              ship.

       _A_L_L_O_W___R_E_Q_U_E_S_T___C_H_A_N_G_E___F_O_R___A_L_L___U_S_E_R_S
              If  this  parameter  is set then all users are allowed to change
              the assigned resources of running jobs (see qalter  -when  NOW),
              which  is also the default in case of absence of this parameter.
              It can be set to 0 to disallow the modification  for  all  users
              that  do  not  have  the  manager  role. This parameter does not
              restrict resource modification of resource  requests  that  will
              get active on reschedule (see qalter -when ON_RESCHEDULE).

       _A_L_L_O_W___J_C___A_S___V_I_O_L_A_T_I_O_N
              If this parameter is set then managers are allowed to change job
              attributes of jobs derived from a job  class  where  the  access
              specifier would normally not allow adjustment.

       _A_L_L_O_W___P_R_E_E_M_P_T___O_W_N___J_O_B_S
              If  this parameter is set then users are allowed to trigger man-
              ual preemption requests for own jobs. As default  only  managers
              and operators are allowed to trigger manual preemption requests.

       _E_N_A_B_L_E___E_N_F_O_R_C_E___M_A_S_T_E_R___L_I_M_I_T
              If this parameter is set then the ss__rrtt, hh__rrtt limit of a  running
              job  are  tested  and  executed  by  the _s_g_e___q_m_a_s_t_e_r(8) when the
              _s_g_e___e_x_e_c_d(8) where the job is in unknown state.

              After ss__rrtt or hh__rrtt limit of a job is  expired  then  the  master
              daemon will wait additional time defined by DDUURRAATTIIOONN__OOFFFFSSEETT (see
              _s_c_h_e_d___c_o_n_f(5)).  If the execution daemon still  cannot  be  con-
              tacted  when  this  additional  time is elapsed, then the master
              daemon will force the deletion of the job (see --ff of _q_d_e_l(1)).

              For jobs which will be deleted that  way  an  accounting  record
              will  be  created.   As  usage  the record will contain the last
              reported online usage, when the execution daemon  could  contact
              qmaster.  The  ffaaiilleedd  state  in the record will be set to 37 to
              indicate that the job was terminated by a limit  enforcement  of
              master daemon.

              After  the  restart of _s_g_e___q_m_a_s_t_e_r(8) the limit enforcement will
              at  first  be  triggered  after  the  double  of   the   biggest
              llooaadd__rreeppoorrtt__iinntteerrvvaall  interval  defined  in _s_g_e___c_o_n_f(5) has been
              elapsed. This will give the execution  daemons  enough  time  to
              reregister at master daemon.

       _E_N_A_B_L_E___F_O_R_C_E_D___Q_D_E_L___I_F___U_N_K_N_O_W_N
              If  this  parameter  is set then a deletion request for a job is
              automatically interpreted as a forced deletion request  (see  --ff
              of  _q_d_e_l(1)) if the host, where the job is running is in unknown
              state.

       _E_N_A_B_L_E___S_U_P___G_R_P___E_V_A_L
              By default all UNIX group entries in access lists,  the  manager
              or operator list will only be evaluated against the primary UNIX
              group of users. If such group entries should also  be  evaluated
              against secondary groups then this paramter can be defined.

       _E_N_A_B_L_E___F_O_R_C_E_D___Q_D_E_L
              If  this  parameter  is  set, non-administrative users can force
              deletion of their own jobs via the _-_f option of _q_d_e_l(1).   With-
              out  this  parameter, forced deletion of jobs is only allowed by
              the Univa Grid Engine manager or operator.

              NNoottee:: Forced deletion for jobs is executed differently depending
              on whether users are Univa Grid Engine administrators or not. In
              case of administrative users, the  jobs  are  removed  from  the
              internal  database of Univa Grid Engine immediately. For regular
              users, the equivalent of a normal _q_d_e_l(1) is executed first, and
              deletion  is  forced  only if the normal cancellation was unsuc-
              cessful.

       _F_O_R_B_I_D___R_E_S_C_H_E_D_U_L_E
              If this parameter is set, re-queuing of jobs cannot be initiated
              by  the  job  script which is under control of the user. Without
              this parameter jobs returning the value 99 are rescheduled. This
              can  be  used  to  cause  the job to be restarted at a different
              machine, for instance if there are not enough resources  on  the
              current one.


       _F_O_R_B_I_D___A_P_P_E_R_R_O_R
              If  this  parameter is set, the application cannot set itself to
              error state.  Without this parameter jobs  returning  the  value
              100  are  set  to  error  state  (and  therefore can be manually
              rescheduled by clearing the error state).  This can be  used  to
              set  the  job  to  error  state when a starting condition of the
              application is not fulfilled before the application  itself  has
              been  started, or when a clean up procedure (e.g. in the epilog)
              decides that it is necessary to run the job again, by  returning
              100  in  the  prolog,  pe_start,  job  script, pe_stop or epilog
              script.


       _D_I_S_A_B_L_E___A_U_T_O___R_E_S_C_H_E_D_U_L_I_N_G
              NNoottee:: Deprecated, may be removed in future release.
              If set to "true" or "1", the _r_e_s_c_h_e_d_u_l_e___u_n_k_n_o_w_n parameter is not
              taken into account.


       _E_N_A_B_L_E___R_E_S_C_H_E_D_U_L_E___K_I_L_L
              If  set  to  "true"  or  "1",  the  _r_e_s_c_h_e_d_u_l_e___u_n_k_n_o_w_n parameter
              affects also jobs which have the rerun flag not  activated  (see
              the   --rr   yy   option   of  _q_s_u_b(1)  and  the  rreerruunn  option  of
              _q_u_e_u_e___c_o_n_f(5)), but they are just  finished  as  they  can't  be
              rescheduled.


       _E_N_A_B_L_E___R_E_S_C_H_E_D_U_L_E___S_L_A_V_E
              If  set  to  "true"  or  "1"  Univa  Grid  Engine  triggers  job
              rescheduling also when the host where the slave tasks of a  par-
              allel  job  executes  is  in  unknown  state,  if  the  _r_e_s_c_h_e_d_-
              _u_l_e___u_n_k_n_o_w_n parameter is activated.


       _R_E_S_C_H_E_D_U_L_E___O_N___K_I_L_L_E_D___E_P_I_L_O_G
              If set to "true" or "1", the behaviour  depending  on  the  exit
              status  of  the  epilog  as  described  in  section _e_p_i_l_o_g is in
              effect, which means if the epilog  dies  because  of  a  signal,
              causing  its exit_status to be larger than 127, the queue is put
              in error state and the job is re-enqueued  to  the  pending  job
              list.
              If  set  to "false" or "0", if the epilog dies because of a sig-
              nal, the job finishes normally and the queue is not put in error
              state.  The "failed" field of the job is set to "15 : in epilog"
              then, but the "exit_status" is the one of the job itself.
              To detect if an epilog was signaled solely its  exit  status  is
              taken  into  account,  i.e. an epilog that exits with a status >
              127 is handled like an epilog that was signaled.
              The default value of this parameter is "true".


       _M_A_X___D_Y_N___E_C
              Sets the max number of dynamic event clients (as  used  by  qsub
              -sync  y  and  by Univa Grid Engine DRMAA API library sessions).
              The default is set to 1000.  The number of dynamic event clients
              should not be bigger than half of the number of file descriptors
              the system has. The number of file descriptors are shared  among
              the  connections  to all exec hosts, all event clients, and file
              handles that the qmaster needs.


       _M_O_N_I_T_O_R___T_I_M_E
              Specifies the time  interval  when  the  monitoring  information
              should be printed. The monitoring is disabled by default and can
              be enabled by specifying an interval.   The  monitoring  is  per
              thread  and  is written to the messages file or displayed by the
              "qping -f" command line tool. Example: MONITOR_TIME=0:0:10  gen-
              erates and prints the monitoring information approximately every
              10 seconds. The specified time is a guideline  only  and  not  a
              fixed  interval.  The interval that is actually used is printed.
              In this example, the interval could be anything between  9  sec-
              onds and 20 seconds.


       _M_O_N_I_T_O_R___R_E_Q_U_E_S_T___Q_U_E_U_E_S
              If  set  to  "true"  or  "1" then addition information about the
              qmaster internal request queues will be provided in the monitor-
              ing  output  of  qping.  Find  more  information in _s_g_e___d_i_a_g_n_o_s_-
              _t_i_c_s(1).


       _L_O_G___M_O_N_I_T_O_R___M_E_S_S_A_G_E
              Monitoring information is logged  into  the  messages  files  by
              default.  This  information can be accessed via by _q_p_i_n_g(1).  If
              monitoring is always enabled,  the  messages  files  can  become
              quite  large.   This  switch  disables logging into the messages
              files, making _q_p_i_n_g _-_f the only source of monitoring data.


       _P_R_O_F___S_I_G_N_A_L
              Profiling provides the user with the possibility to  get  system
              measurements.   This can be useful for debugging or optimization
              of the system. The profiling output will be done within the mes-
              sages file.

              Enables   the   profiling  for  qmaster  signal  thread.   (e.g.
              PROF_SIGNAL=true)


       _P_R_O_F___W_O_R_K_E_R
              Enables  the  profiling  for  qmaster  worker  threads.    (e.g.
              PROF_WORKER=true)


       _P_R_O_F___L_I_S_T_E_N_E_R
              Enables  the  profiling  for  qmaster  listener  threads.  (e.g.
              PROF_LISTENER=true)


       _P_R_O_F___D_E_L_I_V_E_R
              Enables the profiling for qmaster event deliver  thread.   (e.g.
              PROF_DELIVER=true)


       _P_R_O_F___T_E_V_E_N_T
              Enables  the  profiling  for  qmaster timed event thread.  (e.g.
              PROF_TEVENT=true)

       _P_R_O_F___C_O_M_M_L_I_B___T_I_M_E
              Enables the profiling for communication library. The value spec-
              ifies  the  log interval for commlib profiling into the messages
              file. The logging shows the number  of  connected  clients,  the
              number  of  buffered  messages at commlib layer (incoming/outgo-
              ing), the  memory  needed  within  the  commlib  layer  for  the
              buffered  messages  (incoming/outgoing) and the number of cached
              resolved hostnames.


       _L_O_G___I_N_C_O_M_I_N_G___M_E_S_S_A_G_E___S_I_Z_E
              This parameter is used to define if profiling information  about
              incoming  requests is logged into the messages file.  The speci-
              fied value will be used  as  threshold.  All  incoming  messages
              needing more memory size than specified will be logged.  Default
              value for this parameter is 0 which means the feature is  turned
              off.  (e.g. LOG_INCOMING_MESSAGE_SIZE=20M)


       _L_O_G___O_U_T_G_O_I_N_G___M_E_S_S_A_G_E___S_I_Z_E
              This  parameter is used to define if profiling information about
              outgoing requests is logged into the messages file.  The  speci-
              fied  value  will  be  used  as threshold. All outgoing messages
              needing more memory size than specified will be logged.  Default
              value  for this parameter is 0 which means the feature is turned
              off.  (e.g. LOG_OUTGOING_MESSAGE_SIZE=20M)


       _M_A_X___I_N_C_O_M_I_N_G___M_E_S_S_A_G_E___S_I_Z_E
              This parameter is used  to  define  a  message  size  limit  for
              accepting incoming requests.  All incoming client requests using
              more memory than specified are rejected. The client will get  an
              error message for the request. The value cannot be set below 1M.
              Values < 1M  will  be  interpreted  as  0  (=turned  off).   All
              rejected  client  requests  are  logged  into the messages file.
              Default value for this parameter is 0 which means the feature is
              turned off.  (e.g. MAX_INCOMING_MESSAGE_SIZE=1G)


       _M_A_X___O_U_T_G_O_I_N_G___M_E_S_S_A_G_E___S_I_Z_E
              This parameter is used to define a message size limit for creat-
              ing client responses like qstat -j  "*".   All  client  requests
              that  result in creating a response message exceeding the speci-
              fied memory size will get an error message. The value cannot  be
              set  below  1M.  Values  <  1M will be interpreted as 0 (=turned
              off).  All rejected client requests are logged into the messages
              file.   Default  value  for  this parameter is 0 which means the
              feature is turned off.  (e.g. MAX_OUTGOING_MESSAGE_SIZE=1G)


       _S_T_R_E_E___S_P_O_O_L___I_N_T_E_R_V_A_L
              Sets the time interval for spooling  the  sharetree  usage.  The
              default  is set to 00:04:00. The setting accepts colon-separated
              string or seconds. There is no setting  to  turn  the  sharetree
              spooling off.  (e.g. STREE_SPOOL_INTERVAL=00:02:00)


       _M_A_X___J_O_B___D_E_L_E_T_I_O_N___T_I_M_E
              Sets the value of how long the qmaster will spend deleting jobs.
              After this time, the qmaster will continue with other tasks  and
              schedule  the  deletion  of  remaining jobs at a later time. The
              default value is 3 seconds, and will be  used  if  no  value  is
              entered.  The  range  of  valid  values  is > 0 and <= 5.  (e.g.
              MAX_JOB_DELETION_TIME=1)


       _M_A_X___M_A_S_T_E_R___T_A_S_K___W_A_I_T___T_I_M_E
              Sets the value of how long the qmaster will wait for getting all
              slave  task  reports  for  parallel  jobs  when  the master task
              already has been finished. The value is the waiting time in sec-
              onds. The range of valid values is >= 20 and <= 720. The default
              for this parameter  is  to  wait  20  seconds.   (e.g.  MAX_MAS-
              TER_TASK_WAIT_TIME=30)


       _E_N_A_B_L_E___J_O_B___F_A_I_L_U_R_E___I_F___S_L_A_V_E___T_A_S_K___M_I_S_S_I_N_G
              If  this parameter is set to true a missing slave task report of
              a tightly integrated parallel job will set the failed  state  of
              the master task to 101. If the master task is already in failure
              state the value of the master  task  will  not  be  overwritten.
              (e.g. ENABLE_JOB_FAILURE_IF_SLAVE_TASK_MISSING=true)


       _E_N_A_B_L_E___J_O_B___F_A_I_L_U_R_E___O_N___S_L_A_V_E___T_A_S_K___E_R_R_O_R
              If this parameter is set to true a slave task which is reporting
              a failure or reports a non-zero exit status  will  automatically
              set  the  failed  state for the master task of the parallel job.
              The first slave job which is reporting a  non-zero  exit  status
              will set the master task failure field in the accounting file to
              the value 102.  If a slave task is reporting some general  fail-
              ure  the  master task failure state would be set to 103.  If the
              master task is already in failure state the value  will  not  be
              overwritten.   This  option  is only valid for tight integration
              jobs.  (e.g. ENABLE_JOB_FAILURE_ON_SLAVE_TASK_ERROR=true)


       _l_o_s_t___j_o_b___t_i_m_e_o_u_t
              If this timeout parameter is set the qmaster worker threads will
              monitor the jobs reported by the execution daemons. If a task of
              a job that was started on an execution node is not reported  for
              longer than the defined timeout the job is logged in the qmaster
              messages file.  Job loss is e.g. possible if an execution daemon
              cannot  read  one  ore  more  files in his spooling directory at
              startup. This can happen when the spooling directory runs out of
              disc  space  or  on  any other possible file problems. Such jobs
              typically are shown as running and occupy a slot on  the  execu-
              tion  daemon  indefinitely  (see  also "enable_lost_job_resched-
              ule").  If an execution daemon is  not  online  or  came  online
              shortly the timeout will be extended until all preconditions are
              fulfilled.  The  minimum  timeout  depends  also  on  the   used
              "max_unheard" and "load_report_time" settings. If the timeout is
              set below the allowed minimum timeout - the  calculated  minimum
              timeout  is  used.  The  resulting timeout will be logged in the
              qmaster messages file. If the parameter is changed the job time-
              outs  will be  reinitialized.  If the timeout is set to 00:00:00
              the lost job detection is turned off. This is also  the  default
              setting for this parameter. The timeout is specified in seconds.


       _e_n_a_b_l_e___l_o_s_t___j_o_b___r_e_s_c_h_e_d_u_l_e
              This parameter is only valid if there  is  a  "lost_job_timeout"
              parameter  configured.  If  it is enabled the jobs for which the
              timeout was detected are set to error and will show  up  in  the
              pending  job list again.  The accounting record will contain the
              "failed" state 22.  Such jobs will not occupy a slot on the exe-
              cution  node  and  the  slots are free again for other jobs. The
              administrator might remove the error state and let the  job  run
              again  or  just  delete them after solving the reported problem.
              The default for "enable_lost_job_reschedule" is false.


       _g_d_i___t_i_m_e_o_u_t
              Sets how long the communication will wait for  gdi  send/receive
              operations.   The default value is set to 60 seconds. After this
              time, the communication library will retry, if "gdi_retries"  is
              configured, receiving the gdi request. In case of not configured
              "gdi_retries" the communication will return with a "gdi  receive
              failure"  (e.g. gdi_timeout=120 will set the timeout time to 120
              sec) Configuring no gdi_timeout value, the value defaults to  60
              sec.


       _g_d_i___r_e_q_u_e_s_t___s_e_s_s_i_o_n___t_i_m_e_o_u_t
              Default   duration  of  a  session  as  defined  for  "time"  in
              sge_types(1).  When this value is not defined then  00:15:00  (=
              900  seconds) will be used by default duration for new sessions.
              Changing this value will not change  the  duration  of  existing
              sessions.


       _m_a_x___r_e_a_d_e_r___d_e_l_a_y
              If  defined then the value for this parameter has to be an inte-
              ger value in the range from 0 to 5000. It defines the number  of
              milliseconds  before  the  event  processing thread of the read-
              only-thread thread-pool will enforce the update of the read-only
              data store.

              0  means  that  the  event  processing thread will interrupt all
              other read-only threads as soon as possible (regularly when cur-
              rently  processed  requests  are finished) so that it can update
              the read-only thread data store immediately.

              With values >0 the event processing thread also tries to process
              immediately  but  if  there  are pending read-only-requests then
              handling of this requests will  be  preferred  as  long  as  the
              defined time value did not elapse.

              When  this  value  is  not  specified then the used reader delay
              value is 1000 which is also the recommended value for  up  to  8
              read-only threads. If more read-only threads are started then it
              is recommended to increase the  delay  (8-16  threads  =>  2500;
              16-32 threads => 3750; 32-64 threads 5000).

              Please  note  that  the delay is the same that you might see for
              command line clients that use a session (see _s_e_s_s_i_o_n___c_o_n_f(5))


       _e_n_f_o_r_c_e___g_d_i___w_o_r_k_e_r
              GDI (Grid Engine Data Interface) is the  name  of  an  interface
              that command line clients use to communicate with qmaster.

              When _e_n_f_o_r_c_e___g_d_i___w_o_r_k_e_r is set to 1 then all GDI requests (read-
              only and read-write)  will  be  handled  by  worker  threads  in
              _s_g_e___q_m_a_s_t_e_r(1)  even  if  reader  threads are activated. Request
              will then be handled in FCFS manner like it was  done  in  prior
              versions of Univa Grid Engine.

              Read-only  threads can also be disabled by setting the _b_o_o_t_s_t_r_a_p
              parameter _r_e_a_d_e_r to 0. This does not only disable reader threads
              but  also  disables the creation of the read-only thread pool in
              _s_g_e___q_m_a_s_t_e_r(1).  Please note that changing  the  bootstrap  file
              requires  to  restart  _s_g_e___q_m_a_s_t_e_r(1)  before  the  changes  get
              active.


       _e_n_f_o_r_c_e___g_d_i___r_e_a_d_e_r___f_o_r___e_x_e_c_d
              If set to "true" or "1" also incoming get requests from the exe-
              cution daemons are handled by the reader threads if such threads
              are configured in  the  bootstrap  configuration  file.  Default
              value for this parameter is false.


       _g_d_i___r_e_t_r_i_e_s
              Sets  how  often the gdi receive call will be repeated until the
              gdi receive error appears. The default is set to 1. In this case
              the  call  will be done 1 time with no retry.  Setting the value
              to -1 the call will be done  permanently.  In  combination  with
              gdi_timeout  parameter it is possible to configure a system with
              eg. slow NFS, to make sure that  all  jobs  will  be  submitted.
              (e.g. gdi_retries=4)


       _c_l___p_i_n_g
              Turns  on/off  a communication library ping. This parameter will
              create additional debug output.  This output  shows  information
              about the error messages which are returned by communication and
              it will give information about the  application  status  of  the
              qmaster. eg, if it's unclear what's the reason for gdi timeouts,
              this may show you some useful messages.  The  default  value  is
              false (off) (e.g cl_ping=false)


       _S_C_H_E_D_U_L_E_R___T_I_M_E_O_U_T
              Setting  this  parameter allows the scheduler GDI event acknowl-
              edge timeout to be manually configured to a specific value. Cur-
              rently  the  default  value  is  10  minutes  with  the  default
              scheduler configuration and limited between 600  and  1200  sec-
              onds.  Value  is  limited  only  in  case  of default value. The
              default value depends on the  current  scheduler  configuration.
              The _S_C_H_E_D_U_L_E_R___T_I_M_E_O_U_T value is specified in seconds.


       _j_s_v___t_i_m_e_o_u_t
              This  parameter measures the response time of the server JSV. In
              the event that the response time of the JSV is longer  than  the
              timeout  value  specified,  this  will  cause  the JSV to be re-
              started. The default value for the timeout is 10 seconds and  if
              modified, must be greater than 0. If the timeout has been reach,
              the JSV will only try  to  re-start  once,  if  the  timeout  is
              reached again an error will occur.


       _j_s_v___t_h_r_e_s_h_o_l_d
              The  threshold of a JSV is measured as the time it takes to per-
              form a server job verification. If this value  is  greater  than
              the  user  defined value, it will cause logging to appear in the
              qmaster messages file at the INFO level. By setting  this  value
              to 0, all jobs will be logged in the qmaster messages file. This
              value is specified in milliseconds and has a  default  value  of
              5000.

       _g_d_i___t_h_r_e_s_h_o_l_d
              When processing a gdi request (e.g. submitting a job or querying
              job information via qstat) takes too long a warning  is  printed
              into  the  qmaster messages file.  The time being considered too
              long  can  be  defined  by  setting  _g_d_i___t_h_r_e_s_h_o_l_d  _i_n  _s_e_c_o_n_d_s_.
              _D_e_f_a_u_l_t _i_s _a _t_h_r_e_s_h_o_l_d _o_f _6_0 _s_e_c_o_n_d_s_.

       _g_d_i___m_u_l_t_i___r_e_a_d___r_e_q
              This  parameter is deprecated since Univa Grid Engine 8.2. Func-
              tionality will be removed with the next minor or major  release.
              Instead _g_d_i___r_e_q_u_e_s_t___l_i_m_i_t_s can be used (see above).

              This  parameters  defines  the  maximum  number of multi-gdi-get
              requests that are accepted by qmaster per second.  Multi-gdi-get
              requests  are  sent by command line clients like qstat, qhost or
              qmon to receive status information about  the  running  cluster.
              When  a  command  line  client recognizes that it runs into this
              limit then it will retry to receive this information for 60 sec-
              onds.  If  whithin this time qmaster does not accept the request
              then the client will abort.  The default value for this  parame-
              ter  is 0 to disable this limit. In clusters where users execute
              qstat -f or qhost regularely the limit might be set to  a  posi-
              tive  integer value so that these commands will not have a nega-
              tive impact on the cluster throughput. This limit has no  influ-
              ence  on single-gdi-get requests that are sent by administration
              commands invoked via qconf.

       _O_L_D___R_E_S_C_H_E_D_U_L_E___B_E_H_A_V_I_O_R
              Beginning with version 8.0.0 of Univa Grid Engine the scheduling
              behavior  changed  for  jobs  that  are  rescheduled  by  users.
              Rescheduled jobs will not be put at the beginning of the pending
              job  list  anymore.  The submit time of those jobs is set to the
              end time of the previous run. Due to that those rescheduled jobs
              will  be appended at the end of the pending job list as if a new
              job would have been submitted. To achive the old  behaviour  the
              paramter _O_L_D___R_E_S_C_H_E_D_U_L_E___B_E_H_A_V_I_O_R has to be set. Please note that
              this parameter is  declared  as  deprecated.   So  it  might  be
              removed with next minor release.

       _O_L_D___R_E_S_C_H_E_D_U_L_E___B_E_H_A_V_I_O_R___A_R_R_A_Y___J_O_B
              Beginning with version 8.0.0 of Univa Grid Engine the scheduling
              behavior changed for array job tasks  that  are  rescheduled  by
              users.  As soon as a array job task gets scheduled all remaining
              pending tasks of that job will be put at the end of the  pending
              job  list.  To  achive  the old scheduling behavior the paramter
              _O_L_D___R_E_S_C_H_E_D_U_L_E___B_E_H_A_V_I_O_R___A_R_R_A_Y___J_O_B has to  be  set.  Please  note
              that  this  parameter  is declared as deprecated. So it might be
              removed with next minor release.


       _E_N_A_B_L_E___S_U_B_M_I_T___L_I_B___P_A_T_H
              Beginning with version 8.0.1p3 of Univa Grid Engine  environment
              variables like LD_PRELOAD, LD_LIBRARY_PATH and similar variables
              by default may no longer be set via submit option -v or -V.

              Setting these variables could be misused  to  execute  malicious
              code  from  user  jobs,  if  the execution environment contained
              methods (e.g. prolog) to be executed as the root user, or if the
              old interactive job support (e.g. via ssh) was configured.

              Should  it  be  necessary to allow setting environment variables
              like  LD_LIBRARY_PATH   (except   LD_PRELOAD   see   _E_N_A_B_L_E___S_U_B_-
              _M_I_T___L_D___P_R_E_L_O_A_D)  via submit option -v or -V, this can be enabled
              again by setting _E_N_A_B_L_E___S_U_B_M_I_T___L_I_B___P_A_T_H to TRUE.

              In general the correct job environment should be set up  in  the
              job script or in a prolog, making the use of the -v or -V option
              for this purpose unnecessary.


       _E_N_A_B_L_E___S_U_B_M_I_T___L_D___P_R_E_L_O_A_D
              Setting these variable could be  misused  to  execute  malicious
              code  from  user  jobs,  if  the execution environment contained
              methods (e.g. prolog) to be executed as the root user, or if the
              old interactive job support (e.g. via ssh) was configured.

              Should  it  be  necessary to allow setting LD_PRELOAD via submit
              option  -v  or  -V,  this  can  be  enabled  again  by   setting
              _E_N_A_B_L_E___S_U_B_M_I_T___L_D___P_R_E_L_O_A_D to TRUE.

              In  general  the correct job environment should be set up in the
              job script or in a prolog, making the use of the -v or -V option
              for this purpose unnecessary.

              See also _E_N_A_B_L_E___S_U_B_M_I_T___L_I_B___P_A_T_H for more information.


       _A_L_L_O_W___E_M_P_T_Y___A_F_S___T_O_K_E_N
              This  parameter  is  considered  only  if  Univa  Grid Engine is
              installed with AFS support. If this parameter is set to TRUE the
              AFS  token  generation  can be done with the sseett__ttookkeenn__ccmmdd only.
              The configured script can be used  to  completely  generate  the
              token  at job execution time. The default method to generate the
              token by setting up the script  $SGE_ROOT/util/get_token_cmd  is
              still  active  with  this  setting, but it will not result in an
              error if the get_token_cmd script  is  not  available.  If  this
              parameter is set to TRUE moving away the get_token_cmd script is
              suggested to get a better submit performance.


       _E_N_A_B_L_E___R_E_D_U_C_E___M_E_M___F_R_E_E
              When the mem_free complex is configured  as  a  consumable  this
              parameter  allows  the  users  to reduce the requested amount of
              mem_free during job run-time. When the  parameter  is  set,  the
              user  is  able  to reduce the requested amount of memory by per-
              forming a qalter on the previously  requested  mem_free  consum-
              able.  If  this  parameter is disabled or not set mem_free (when
              configured as a consumable) can't be changed for a running  job.


       _M_A_X___J_O_B___I_D
              This  parameter  can be used for setting the maximum job id used
              by Univa Grid Engine.  Job ids are allocated from id  1  to  the
              maximum set.

              Setting _M_A_X___J_O_B___I_D to 0 disables job submission.

              The default maximum job id is 4294967295 (the maximum 32bit num-
              ber).

              This parameter also has effect on the advance reservation ids.


       _M_I_N___P_E_N_D_I_N_G___E_N_R_O_L_L_E_D___T_A_S_K_S
              Ticket calculation for sharetree, functional and override policy
              is  done  per  job and for already existing tasks of array jobs.
              Already existing array tasks are running  array  tasks  (getting
              running tickets) and array tasks which have been running but are
              pending again, e.g. due to rescheduling (getting  pending  tick-
              ets).   If different pending tickets shall be computed for tasks
              of an array job it is necessary to create (enroll) pending array
              tasks.     This    can   be   controlled   via   the   _M_I_N___P_E_N_D_-
              _I_N_G___E_N_R_O_L_L_E_D___T_A_S_K_S parameter.

              Default setting is 0: No pending array tasks  will  be  enrolled
              for  ticket  calculation,  the tasks are not created before they
              are scheduled. Pending tickets are calculated for the whole job,
              all tasks of an array job will get the same amount of tickets.

              Setting it to a positive number triggers creation of this number
              of pending array tasks per job.

              When it is set to  -1  all  tasks  of  an  array  job  will  get
              enrolled.


       _S_G_E___D_E_B_U_G___L_E_V_E_L
              With  the  environment  variable _S_G_E___D_E_B_U_G___L_E_V_E_L debug output of
              sge_qmaster can be enabled when sge_qmaster is running non  dae-
              monized.   The  qmaster_params  _S_G_E___D_E_B_U_G___L_E_V_E_L  serves the same
              purpose but can be switched  on  and  off  during  runtime.  See
              _s_g_e___d_i_a_g_n_o_s_t_i_c_s(1)  for  details  about  _S_G_E___D_E_B_U_G___L_E_V_E_L. Please
              note that the delimiter between multiple levels is : (colon) for
              the     qmaster_params,     so     the    environment    setting
              SGE_DEBUG_LEVEL="3 0 0 0 0 0 0 0" translates  to  qmaster_params
              SGE_DEBUG_LEVEL=3:0:0:0:0:0:0:0.

              Debug output by default goes to stderr, which means, with a dae-
              monized sge_qmaster it would get  lost.  Please  use  the  qmas-
              ter_params _S_G_E___D_E_B_U_G___T_A_R_G_E_T to redirect debug output to file.


       _S_G_E___D_E_B_U_G___T_A_R_G_E_T
              With  the _S_G_E___D_E_B_U_G___T_A_R_G_E_T parameter debug output of sge_qmaster
              can be redirected into a file, to stdout or to  stderr.  Default
              is  stderr if the parameter is not set or if a given file cannot
              be opened.


       _A_R___R_E_S_E_R_V_E___A_V_A_I_L_A_B_L_E___O_N_L_Y
              When this parameter is set to 1 or  true,  advance  reservations
              submitted  via  qrsub will only be scheduled to currently avail-
              able resources, this means not to  queue  instances  being  dis-
              abled, suspended or in error state.  This is a cluster wide set-
              ting which when enabled will overwrite the AR  specific  setting
              done via qrsub option --rraaoo, see also _q_r_s_u_b(1).


       _M_A_X___T_C_O_N___T_A_S_K_S
              This parameter can be used to disable (value 0) concurrent array
              jobs or limit the maximum size of concurrent array  jobs.   Sub-
              mission  of concurrent array jobs will be rejected if their size
              (number of array tasks) exceeds  the  value  of  MAX_TCON_TASKS.
              See  also  documentation  of the _-_t_c_o_n submit option in _s_g_e___s_u_b_-
              _m_i_t(1).


       _D_I_S_A_B_L_E___N_A_M_E___S_E_R_V_I_C_E___L_O_O_K_U_P___C_A_C_H_E
              This parameter can be used to disable (value 0) caching of  name
              service  lookup calls. The default setting is enabled (value 1).
              Switching off the cache might decrease the performance  signifi-
              cantly.


       _N_A_M_E___S_E_R_V_I_C_E___L_O_O_K_U_P___C_A_C_H_E___E_N_T_R_Y___L_I_F_E___T_I_M_E
              This  parameter can be used to define when a cached entry in the
              name service lookup cache is removed.  The  default  setting  is
              zero (value 0). The default setting will auto adjust the timeout
              for compatibily reasons to 600 seconds. The value cannot be  set
              >  86400 (1 day).  Changing this parameter might have a signifi-
              cant performance influence.


       _N_A_M_E___S_E_R_V_I_C_E___L_O_O_K_U_P___C_A_C_H_E___E_N_T_R_Y___U_P_D_A_T_E___T_I_M_E
              This parameter can be used to define when a cached entry in  the
              name  service  should  get  re-resolved.  The default setting is
              zero (value 0). The default setting will auto adjust the timeout
              for  compatibily reasons to 120 seconds. The value cannot be set
              > 1800 (30 min).  Changing this parameter might have a  signifi-
              cant performance influence.


       _N_A_M_E___S_E_R_V_I_C_E___L_O_O_K_U_P___C_A_C_H_E___E_N_T_R_Y___R_E_R_E_S_O_L_V_E___T_I_M_E
              This  parameter  can  be used to define when a cached entry that
              was not resolveable (name service returned an  error)  when  the
              host  was  added or at the last cache entry update.  The default
              setting is zero (value 0). The default setting will auto  adjust
              the  timeout  for  compatibily  reasons to 60 seconds. The value
              cannot be set > 600.  Changing this parameter might have a  sig-
              nificant performance influence.


       _L_O_G___J_O_B___V_E_R_I_F_I_C_A_T_I_O_N___T_I_M_E
              This  parameter  can  be used to enable profiling logging in the
              qmaster messages file for the job verification with the  submis-
              sion option -w, see also _s_u_b_m_i_t(1).

              When  the  parameter is not set or it is set to a negative value
              no profiling will be done.

              When the parameter is set to 0 then profiling will be  done  and
              the resulting verification time will always be logged as an INFO
              message.

              When the parameter is set to a value (threshold) > 0  then  pro-
              filing  will be done, if the verification time exceeds the given
              threshold a WARNING message will be logged.


       _L_O_G___R_E_Q_U_E_S_T___P_R_O_C_E_S_S_I_N_G___T_I_M_E
              This parameter can be used to enable profiling  logging  in  the
              qmaster  messages file for the processing of requests by worker,
              reader and event master threads.

              When the parameter is not set or it is set to a  negative  value
              no profiling will be done.

              When  the  parameter is set to 0 then profiling will be done and
              the resulting processing time will always be logged as  an  INFO
              message.

              When  the  parameter is set to a value (threshold) > 0 then pro-
              filing will be done, if the processing time  exceeds  the  given
              threshold a WARNING message will be logged.


       _L_O_G___S_P_O_O_L_I_N_G___T_I_M_E
              This  parameter  can  be used to enable profiling logging in the
              qmaster messages file for spooling operations.

              When the parameter is not set or it is set to a  negative  value
              no profiling will be done.

              When  the  parameter is set to 0 then profiling will be done and
              the resulting spooling time will always be  logged  as  an  INFO
              message.

              When  the  parameter is set to a value (threshold) > 0 then pro-
              filing will be done, if the  spooling  time  exceeds  the  given
              threshold a WARNING message will be logged.

       Changing qqmmaasstteerr__ppaarraammss will take immediate effect, except gdi_timeout,
       gdi_retries, cl_ping, these will take effect only for new  connections.
       The default for qqmmaasstteerr__ppaarraammss is none.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   eexxeeccdd__ppaarraammss
       This is used for passing additional parameters to the Univa Grid Engine
       execution daemon. The following values are recognized:

       _I_G_N_O_R_E___N_G_R_O_U_P_S___M_A_X___L_I_M_I_T
              If  a  user is assigned to NGROUPS_MAX-1 supplementary groups so
              that Univa Grid Engine is not able to add an  addition  one  for
              job  tracking  then  the job will go into error state when it is
              started.  Administrators that want prevent the system  doing  so
              can  set  this parameter.  In this case the NGROUPS_MAX limit is
              ignored and the additional group (see _g_i_d___r_a_n_g_e) is not set.  As
              a  result for those jobs no online usage will be available. Also
              the parameter _E_N_A_B_L_E___A_D_D_G_R_P___K_I_L_L will have  no  effect.   Please
              note  that it is not recommended to use this parameters. Instead
              the group membership of the submit user should be reduced.


       _K_E_E_P___A_C_T_I_V_E
              If set to ERROR, the spool directory of the job  (maintained  by
              _s_g_e___s_h_e_p_h_e_r_d(8)),  the job script, a file which includes all job
              related messages from the execution daemon as also a list of all
              files  located  in  the  jobs temp-directory will be sent to the
              _s_g_e___q_m_a_s_t_e_r(8) if the job had an exit-status != 0 or if the  job
              failed (see _a_c_c_o_u_n_t_i_n_g(5)).

              If  set  to  ALWAYS,  the  execution  daemon will send the spool
              directory as also the debugging files for every job.

              These files can be found at $SGE_ROOT/$SGE_CELL/faulty_jobs

              If set to true, the execution daemon will not remove  the  spool
              directory  maintained  by  _s_g_e___s_h_e_p_h_e_r_d(8) for a job (this value
              should only be set for debugging purposes).


       _K_E_E_P___A_C_T_I_V_E___S_I_Z_E
              If KEEP_ACTIVE is set to ERROR or ALWAYS  the  execution  daemon
              will transfer files to _s_g_e___q_m_a_s_t_e_r(8) As big files might lead to
              a high memory consumption in _s_g_e___q_m_a_s_t_e_r(8) files with a  bigger
              size than KEEP_ACTIVE_SIZE (in Bytes) will not get sent.  If not
              set the file size is limited to 20 MB.


       _K_E_E_P___O_P_E_N___F_D_S
              As part of the start process for a  job  the  sge_shepherd  will
              close  all open file descriptors. If this should not be done for
              one or more file descriptors then this variable can  be  set  to
              one  number  or to a range of numbers (like 4-9).  Corresponding
              file descriptors will then not be closed.  Please note that cer-
              tain implementations of services (like Active Directory) require
              this functionality, so that the processes part of the  job,  can
              use underlying library functionality.


       _M_A_X___I_J_S___C_L_I_E_N_T___W_A_I_T___T_I_M_E
              This  parameter defines the waiting time for builtin interactive
              job support jobs to flush job output at job end and deliver  the
              exit  state  to  the  connected  qrsh or qlogin client.  Once an
              interactive job has finished the _s_g_e___s_h_e_p_h_e_r_d(8)) will wait  for
              an  acknowledge from the connected qrsh client. The already fin-
              ished job will be shown as running during this time. If the qrsh
              client component is suspended for some reason or the network has
              some outage it might not always be useful to wait until the data
              is acknowledged.

              If set to INFINITY the _s_g_e___s_h_e_p_h_e_r_d(8)) will only finish on con-
              nection errors.  If  specified  as  time  value  in  the  format
              HH:MM:SS  all  values >= 00:00:01 are used as timeout value. The
              default value for this paramter is 1 Minute (00:01:00).

              Once the timeout occurs the job will be reported as finished and
              the  final  exit state of the job is available in the accounting
              file.

              The _M_A_X___I_J_S___C_L_I_E_N_T___W_A_I_T___T_I_M_E parameter has no influence  on  the
              suspend  state of the qrsh client. A suspended qrsh client which
              was used to submit the job will stay suspended  until  the  user
              unsuspends the qrsh.

              NOTE: The job control feature of the shell where the qrsh job is
              submitted may be responsible for suspending  the  qrsh  when  it
              tries  to read from stdin or tries to write to stdout if qrsh is
              started in background. This can be bypassed using the _q_r_s_h _-_b_g_i_o
              parameter  when  submitting  the qrsh job as background job (see
              _-_b_g_i_o option of _s_u_b_m_i_t(1) man page for more information).



       _P_T_F___M_I_N___P_R_I_O_R_I_T_Y, _P_T_F___M_A_X___P_R_I_O_R_I_T_Y
              The maximum/minimum priority which Univa Grid Engine will assign
              to  a  job.   Typically this is a negative/positive value in the
              range of -20 (maximum) to 19 (minimum) for systems  which  allow
              setting  of  priorities with the _n_i_c_e(2) system call. Other sys-
              tems may provide different ranges.
              The default priority range (varies from  system  to  system)  is
              installed  either  by  removing  the  parameters or by setting a
              value of -999.
              See the "messages" file of the execution daemon for  the  prede-
              fined  default value on your hosts. The values are logged during
              the startup of the execution daemon.


       _P_R_O_F___E_X_E_C_D
              Enables  the  profiling  for  the   execution   daemon.    (e.g.
              PROF_EXECD=true)


       _S_C_R_I_P_T___T_I_M_E_O_U_T
              This  parameter  defines  the timeout value for scripts that are
              executed by  _s_g_e___s_h_e_p_h_e_r_d(8)  (e.g.  prolog/epilog  of  a  job).
              Scripts where the execution duration would exceed the configured
              timeout value will be terminated  by  _s_g_e___s_h_e_p_h_e_r_d(8)  automati-
              cally.   The default for this parameter is 2 minutes (00:02:00).
              It can be set to any value greater than 0.


       _N_O_T_I_F_Y___K_I_L_L
              The parameter allows you to change the notification  signal  for
              the signal SIGKILL (see _-_n_o_t_i_f_y option of _q_s_u_b(1)).  The parame-
              ter either accepts signal names (use the _-_l option  of  _k_i_l_l(1))
              or  the special value _n_o_n_e. If set to _n_o_n_e, no notification sig-
              nal will be sent. If it is set to _T_E_R_M, for instance, or another
              signal  name  then this signal will be sent as notification sig-
              nal.


       _N_O_T_I_F_Y___S_U_S_P
              With this parameter it is possible to  modify  the  notification
              signal   for  the  signal  SIGSTOP  (see  _-_n_o_t_i_f_y  parameter  of
              _q_s_u_b(1)).  The parameter either accepts signal names (use the _-_l
              option of _k_i_l_l(1)) or the special value _n_o_n_e. If set to _n_o_n_e, no
              notification signal will be sent. If it  is  set  to  _T_S_T_P,  for
              instance,  or  another signal name then this signal will be sent
              as notification signal.


       _U_S_E___Q_S_U_B___G_I_D
              If this parameter is set to true, the primary group  id   active
              when a job was submitted will be set to become the primary group
              id for job execution. If the parameter is not set,  the  primary
              group  id  as  defined  for  the job owner in the execution host
              _p_a_s_s_w_d(5) file is used.
              The feature is only available for jobs  submitted  via  _q_s_u_b(1),
              _q_r_s_h(1), _q_m_a_k_e(1) and _q_t_c_s_h(1).  Also, it only works for _q_r_s_h(1)
              jobs (and thus also for _q_t_c_s_h(1) and _q_m_a_k_e(1)) if rsh  and  rshd
              components  are  used  which are provided with Univa Grid Engine
              (i.e., the rrsshh__ddaaeemmoonn and  rrsshh__ccoommmmaanndd  parameters  may  not  be
              changed from the default).


       _S___D_E_S_C_R_I_P_T_O_R_S, _H___D_E_S_C_R_I_P_T_O_R_S, _S___M_A_X_P_R_O_C, _H___M_A_X_P_R_O_C,

       _S___M_E_M_O_R_Y_L_O_C_K_E_D, _H___M_E_M_O_R_Y_L_O_C_K_E_D, _S___L_O_C_K_S, _H___L_O_C_K_S
              Specifies  soft  and  hard resource limits as implemented by the
              _s_e_t_r_l_i_m_i_t(2) system call. See this manual page  on  your  system
              for more information. These parameters complete the list of lim-
              its set by the RESOURCE LIMITS parameter of the queue configura-
              tion  as described in _q_u_e_u_e___c_o_n_f(5).  Unlike the resource limits
              in the queue configuration, these resource limits  are  set  for
              every  job  on this execution host. If a value is not specified,
              the resource limit is inherited from the execution  daemon  pro-
              cess.  Because  this  would lead to unpredicted results, if only
              one limit of a resource is set (soft or hard), the corresponding
              other limit is set to the same value.
              _S___D_E_S_C_R_I_P_T_O_R_S and _H___D_E_S_C_R_I_P_T_O_R_S specify a value one greater than
              the maximum file descriptor number that can  be  opened  by  any
              process of a job.
              _S___M_A_X_P_R_O_C  and _H___M_A_X_P_R_O_C specify the maximum number of processes
              that can be created by the job user on this execution host
              _S___M_E_M_O_R_Y_L_O_C_K_E_D and _H___M_E_M_O_R_Y_L_O_C_K_E_D specify the maximum number  of
              bytes  of  virtual memory that may be locked into RAM. The value
              type is _m_e_m_o_r_y___s_p_e_c_i_f_i_e_r as described in the _s_g_e___t_y_p_e_s(1) manual
              page.
              _S___L_O_C_K_S and _H___L_O_C_K_S specify the maximum number of file locks any
              process of a job may establish.
              All of these values can be specified using the  multiplier  let-
              ters  k, K, m, M, g and G, see _s_g_e___t_y_p_e_s(1) for details. For all
              of these values, the keyword "INFINITY" (which means RLIM_INFIN-
              ITY as described in the _s_e_t_r_l_i_m_i_t(2) manual page) can be used to
              set the resource limit to "unlimited".

       _I_N_H_E_R_I_T___E_N_V
              This parameter indicates whether the shepherd should  allow  the
              environment  inherited  by  the  execution daemon from the shell
              that started it to be inherited by the job it's starting.   When
              true,  any  environment  variable that is set in the shell which
              starts the execution daemon at the time the execution daemon  is
              started  will  be set in the environment of any jobs run by that
              execution daemon, unless the environment variable is  explicitly
              overridden,  such as PATH or LOGNAME.  If set to false, each job
              starts with only the environment variables that  are  explicitly
              passed  on  by  the  execution daemon, such as PATH and LOGNAME.
              The default value is true.


       _S_E_T___L_I_B___P_A_T_H
              This parameter tells the execution daemon  whether  to  add  the
              Univa  Grid  Engine shared library directory to the library path
              of executed jobs.  If set to true, and INHERIT_ENV is  also  set
              to  true, the Univa Grid Engine shared library directory will be
              prepended to the library path which is inherited from the  shell
              which  started  the  execution daemon.  If INHERIT_ENV is set to
              false, the library path will contain only the Univa Grid  Engine
              shared  library  directory.  If set to false, and INHERIT_ENV is
              set to true, the library path exported to the job  will  be  the
              one inherited from the shell which started the execution daemon.
              If INHERIT_ENV is also set to false, the library  path  will  be
              empty.   After the execution daemon has set the library path, it
              may be further altered by the shell in which  the  job  is  exe-
              cuted,  or  by  the  job  script  itself.  The default value for
              SET_LIB_PATH is false.


       _E_N_A_B_L_E___A_D_D_G_R_P___K_I_L_L
              If this parameter is set then Univa Grid Engine uses the supple-
              mentary  group  ids  (see  _g_i_d___r_a_n_g_e)  to identify all processes
              which are to be terminated  when  a  job  is  deleted,  or  when
              _s_g_e___s_h_e_p_h_e_r_d(8) cleans up after job termination.


       _S_U_S_P_E_N_D___P_E___T_A_S_K_S
              With this parameter set to TRUE tasks of tightly integrated jobs
              get suspended and unsuspended when the  job  gets  suspended  or
              unsuspended.   Some  MPI  implementations are known to fail when
              tasks get suspended, in case you are running such jobs set  _S_U_S_-
              _P_E_N_D___P_E___T_A_S_K_S  to  FALSE  and  handle  suspension / unsuspension
              through a suspend_method and resume_method, see  _q_u_e_u_e___c_o_n_f(5)).


       _P_D_C___I_N_T_E_R_V_A_L
              This  parameter defines the interval how often the PDC (Portable
              Data Collector) is executed by the execution daemon. The PDC  is
              responsible  for  enforcing  the  resource  limits s_cpu, h_cpu,
              s_vmem and h_vmem (see _q_u_e_u_e___c_o_n_f(5)) and job usage  collection.
              The  parameter can be set to a time_specifier (see _s_g_e___t_y_p_e_s(5))
              , to PPEERR__LLOOAADD__RREEPPOORRTT or to NNEEVVEERR.  If this parameter is  set  to
              PPEERR__LLOOAADD__RREEPPOORRTT  the  PDC  is  triggered in the same interval as
              llooaadd__rreeppoorrtt__ttiimmee (see above). If this parameter is set to  NNEEVVEERR
              the  PDC  run  is  never  triggered.  The default value for this
              parameter is 5 seconds.
              NNoottee:: A PDC run is quite compute extensive may degrade the  per-
              formance  of the running jobs. But if the PDC runs less often or
              never the online usage can be incomplete or totally missing (for
              example  online  usage of very short running jobs might be miss-
              ing) and the resource limit  enforcement  is  less  accurate  or
              would not happen if PDC is turned of completely.


       _P_D_C___C_A_C_H_E___U_P_D_A_T_E___T_I_M_E_O_U_T
              This parameter is used to define the period of time how long the
              cached process data of a process  that  was  not  identified  to
              belong to a Univa Grid Engine started job is valid. If the time-
              out is not reached the cached proc  table  information  will  be
              used.  Once  the  information  for the process is older than the
              defined timeout it will be re-read from the proc table.  If  the
              parameter is set to "0" the cache refreshing is turned off. This
              means once the process information is cached there will never be
              an update on the cached information.
              If  you have a high throughput of jobs in your Univa Grid Engine
              cluster and your process id roll-over time is short it is recom-
              mended  to set this parameter to a value below your typical pro-
              cess id wrap-around time.
              The default for this parameter is 120 seconds. This  means  that
              the  cached  process  information  for such processes is updated
              every two minutes.


       _E_N_A_B_L_E___B_I_N_D_I_N_G
              If this parameter is set then Univa Grid Engine enables the core
              binding  module  within  the  execution  daemon to apply binding
              parameters that are specified during submission time of  a  job.
              This  parameter is not set per default and therefore all binding
              related information will be ignored for  hosts  other  than  lx-
              amd64  and  lx-x86.  If  the  host has such a lx-amd64 or lx-x86
              architecture it is internally turned on per default.  Find  more
              information  for  job to core binding in the section _-_b_i_n_d_i_n_g of
              _q_s_u_b(1).


       _D_I_S_A_B_L_E___G_I_D___R_A_N_G_E___O_B_S_E_R_V_A_T_I_O_N
              If this parameter is set to 1 (or true) then gid range  observa-
              tion  is  turned  off in the Univa Grid Engine execution daemon.
              The default for this option is 0  (or  false)  which  means  the
              execd  will  per  default the processes running on the execution
              host.  If a process is using a group id  that  is  reserved  for
              starting Univa Grid Engine jobs and it does not belong to a cur-
              rent running Univa Grid Engine job this group id will be blocked
              for starting further Univa Grid Engine jobs until the unexpected
              processes are gone.


       _D_I_S_A_B_L_E___M___M_E_M___F_R_E_E
              If this parameter is set to 1 (or true) then the execution  dae-
              mon   does  not  report  load  values  for  the  m_mem_free  and
              m_mem_free_n<NODES> anymore. This is needed especially in  cases
              where  resource  reservation  for jobs requesting such a complex
              value must be enabled. When a load value of a specific  host  is
              lower  than  the requested value for job then the scheduler does
              no resource reservation for that host. In order to prevent  this
              the load value sending can be turned off.


       _E_N_A_B_L_E___M_E_M___D_E_T_A_I_L_S
              If  this  parameter  is  set to 1 (or true) execution daemons on
              Linux report additional per job memory usage: rss (resident  set
              size),  pss  (proportional set size), smem (shared memory), pmem
              (private memory), maxrss (maximum  resident  set  size),  maxpss
              (maximum  proportional set size).  These additional memory usage
              values can be retrieved via qstat -j <job_id>.


       _E_N_F_O_R_C_E___L_I_M_I_T_S
              When a job is started by _s_g_e___e_x_e_c_d(8) limits configured  in  the
              _q_u_e_u_e___c_o_n_f(5)  or specified during job submission will be set as
              per process resource limit, see also _s_e_t_r_l_i_m_i_t(2).

              The following limits are in addition enforced  by  sge_execd  as
              per  job limits: h_cpu, s_cpu, h_rss, s_rss, h_vmem, s_vmem.  If
              ccggrroouuppss__ppaarraammss is set to  true  h_vmem  is  controlled  only  by
              cgroups (see ccggrroouuppss__ppaarraammss for more information).

              The  _E_N_F_O_R_C_E___L_I_M_I_T_S  parameter allows the specification of where
              the limits  h_cpu,  s_cpu,  h_rss,  s_rss,  h_vmem,  s_vmem  are
              enforced:

              If  _E_N_F_O_R_C_E___L_I_M_I_T_S  is  not set or if it is set to the value ALL
              the limits are both set as resource limit and they are  enforced
              by _s_g_e___e_x_e_c_d(8) as well.

              If  _E_N_F_O_R_C_E___L_I_M_I_T_S is set to SHELL, only the resource limits are
              set, _s_g_e___e_x_e_c_d(8) will not enforce them.

              If _E_N_F_O_R_C_E___L_I_M_I_T_S  is  set  to  EXECD,  these  limits  are  only
              enforced by _s_g_e___e_x_e_c_d(8) INFINITY is set as resource limit.

              If  _E_N_F_O_R_C_E___L_I_M_I_T_S  is set to OFF, _s_g_e___e_x_e_c_d(8) will not enforce
              them and INFINITY is set as resource limit.


       _M_O_N_I_T_O_R___P_D_C
              When this parameter is  set  to  true  _s_g_e___e_x_e_c_d(8)  will  write
              information  and  errors  reported  by the data collector to its
              messages file, e.g. errors when reading from the /proc file sys-
              tem.   _M_O_N_I_T_O_R___P_D_C  can be set to 0 (or false) or 1 (true).  Use
              this parameter with care and only when suggested by  Univa  Sup-
              port,  e.g.  for  debugging  issues with the reporting of online
              usage, as a significant amount of information might get  written
              to the _s_g_e___e_x_e_c_d(8) messages file.

       Changing  eexxeeccdd__ppaarraammss  will take effect after it was propagated to the
       execution daemons. The propagation is done in one load report interval.
       The default for eexxeeccdd__ppaarraammss is none.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

   ccggrroouuppss__ppaarraammss
       A list of parameters for  enabling  and  controlling  the  behavior  of
       cgroups.  This  list can be set globally in the global configuration or
       be overridden in the  host  configuration  for  particular  hosts.  The
       cgroups  feature is only available for _l_x_-_a_m_d_6_4 hosts. The OS must sup-
       port cgroups (e.g. RHEL >= 6  with  installed  cgroup  packages).  Each
       cgroup  subsystem  must  be  mounted  to a different subdirectory below
       ccggrroouupp__ppaatthh. The following values are recognized:

       _c_g_r_o_u_p___p_a_t_h

       If set to nnoonnee then the cgroup support is disabled otherwise  the  path
       to  the cgroup main directory is set here (usually _/_c_g_r_o_u_p). All cgroup
       subsystems must be available in subdirectories here (either as link  or
       as  mounted directories). Example: For memory limitation _/_c_g_r_o_u_p_/_m_e_m_o_r_y
       and for core binding _/_c_g_r_o_u_p_/_c_p_u_s_e_t must exist, when the cgroup_path is
       set to _/_c_g_r_o_u_p.

       _c_p_u_s_e_t

       If  set  to  ttrruuee (or 11) then core binding is done by the cgroup cpuset
       subsystem. This affects only jobs requesting a core  binding  with  the
       --bbiinnddiinngg  submission  parameter.  Using  cpuset is recommended since it
       limits the job to the chosen CPU cores without the possibility that the
       user overcomes these limits.

       _m___m_e_m___f_r_e_e___l_i_m_i_t___h_a_r_d

       If  set  to  ttrruuee  (or  11) it restricts the usage of main memory to the
       value requested with the m_mem_free parameter. For using this parameter
       a  mounted  memory  subsystem  (_$_c_g_r_o_u_p___p_a_t_h_/_m_e_m_o_r_y)  and a main memory
       request using the m_mem_free complex is required.  If  a  job  consumes
       more  memory  than requested it is usually aborted since further malloc
       calls will fail. Internally the  value  _m_e_m_o_r_y_._l_i_m_i_t___i_n___b_y_t_e_s  is  set.
       More  details can be found in the operating system / cgroups documenta-
       tion.

       _m___m_e_m___f_r_e_e___l_i_m_i_t___s_o_f_t

       If set to ttrruuee (or 11) this parameter restricts the usage of main memory
       only  if  the memory limit is exceeded and the operating system detects
       memory contention. Main memory restriction is usually applied by  push-
       ing  back the jobs main memory usage to the soft limits. Please consult
       the operating system / Linux kernel  documentation  for  more  details.
       Internally  the  value  _m_e_m_o_r_y_._s_o_f_t___l_i_m_i_t___i_n___b_y_t_e_s is set in the cgroup
       memory subsystem. If _m___m_e_m___f_r_e_e___l_i_m_i_t___h_a_r_d is active as well  the  hard
       memory limit rule is applied by the cgroup subsystem.

       _h___v_m_e_m___l_i_m_i_t

       If  set to ttrruuee (or 11) this parameter restricts the usage of the sum of
       main memory usage  and  swap  space  usage  for  a  job  if  hh__vvmmeemm  is
       requested.  Internally the cgroup parameter _m_e_m_o_r_y_._m_e_m_s_w_._l_i_m_i_t___i_n___b_y_t_e_s
       is set.  Please note that when the limit is  applied  successfully  the
       hh__vvmmeemm  rlimit  is  not  set for the job anymore. The execd daemon will
       also not enforce the h_vmem limit. This means only cgroups will  handle
       the  specified  hh__vvmmeemm  rlimit.   If  the  value is lower than mmiinn__mmeemm--
       oorryy__lliimmiitt it is automatically increased to the configured  amount.   If
       mm__mmeemm__ffrreeee__lliimmiitt__hhaarrdd  is  used  and mm__mmeemm__ffrreeee requested with a higher
       value than hh__vvmmeemm then  mm__mmeemm__ffrreeee  is  reduced  to  hh__vvmmeemm  limit.  If
       mm__mmeemm__ffrreeee  is set to a lower value than hh__vvmmeemm then the kernel ensures
       that only mm__mmeemm__ffrreeee  main  memory  is  available  for  the  job,  when
       requesting more memory it is automatically taken from swap space.  Only
       when the total memory exceeds the hh__vvmmeemm limit  cgroups  will  do  some
       action.  If  hh__vvmmeemm is requested but no mm__mmeemm__ffrreeee then automatically a
       hard cgroup limit for main memory with the size of hh__vvmmeemm  is  applied,
       otherwise  virtual  memory  limitation  will not work. This is a cgroup
       limitation. In this case a mmiinn__mmeemmoorryy__lliimmiitt  value  affects  hh__vvmmeemm  as
       well.

       _m_i_n___m_e_m_o_r_y___l_i_m_i_t

       If  set  to  a  memory value (like 10M) then each mm__mmeemm__ffrreeee (or hh__vvmmeemm
       request, when mixed with mm__mmeemm__ffrreeee) which restricts the job  due  with
       mm__mmeemm__ffrreeee__lliimmiitt__hhaarrdd  or mm__mmeemm__ffrreeee__lliimmiitt__ssoofftt and which is lower than
       this value is automatically increased to the specified min_memory_limit
       value.  Example:  If  mm__mmeemm__ffrreeee__lliimmiitt__hhaarrdd  is  enabled  and  the  job
       requests 100M but mmiinn__mmeemmoorryy__lliimmiitt is set to  150M  then  the  internal
       limit for the job (_m_e_m_o_r_y_._l_i_m_i_t___i_n___b_y_t_e_s) is set to 150M. This does not
       affect qstat or internal book keeping.  The parameter is used to  solve
       OS  specific  issues with too large memory footprints (shepherd is part
       of the restriction) of small jobs. The  memory  is  not  multiplied  by
       amount  of  slots  requested by the job. The parameter is turned off by
       setting to 0 or not setting the parameter at all. Jobs just  requesting
       cgroups  hh__vvmmeemm without mm__mmeemm__ffrreeee are not affected. Here the same lim-
       its like for hh__vvmmeemm are used.

       _f_r_e_e_z_e_r

       If set to ttrruuee (or 11) it enables the cgroup freezer subsystem  for  job
       suspension  and  resumption.  The freezer subsystem needs to be mounted
       under _$_c_g_r_o_u_p___p_a_t_h_/_f_r_e_e_z_e_r. If enabled a job is  not  longer  suspended
       with  the  SIGSTOP  and  resumed with SIGCONT, the job is disabled from
       being scheduled by the Linux kernel by the freezer subsystem. There  is
       no  signal  sent  to  the job. The processes are usually put in D state
       (which is an uninterruptible sleep, like for IO). If the job  needs  to
       be  notified  then the --nnoottiiffyy submission option can be used. The queue
       configuration can override the cgroups suspension mechanism for certain
       jobs.  This  is  done  by  putting  the  standard  signals  in the sus-
       pend_method (SIGSTOP) and resume_method (SIGCONT). This can  be  needed
       for  certain job types which relay on signaling. For tightly integrated
       jobs only the master task is put into suspend  state  (the  first  task
       regardless  _J_O_B___I_S___F_I_R_S_T___T_A_S_K is configured in the parallel environment
       configuration or not). If all tasks of a parallel job has to be put  in
       the  freezer then ffrreeeezzee__ppee__ttaasskkss needs to be activated. If queue over-
       rides freezer with own signals, ffrreeeezzee__ppee__ttaasskkss is  set  to  true,  but
       _S_U_S_P_E_N_D___P_E___T_A_S_K_S  (eexxeeccdd__ppaarraammss)  is  set to false than slave tasks are
       not signaled.

       _f_r_e_e_z_e___p_e___t_a_s_k_s

       If set to ttrruuee (or 11) and the freezer subsystem is turned on  then  not
       only  the master task is suspended also all slave tasks of the parallel
       job are frozen.  If  queue  overrides  freezer  with  own  signals  and
       ffrreeeezzee__ppee__ttaasskkss  is set to true, but _S_U_S_P_E_N_D___P_E___T_A_S_K_S (eexxeeccdd__ppaarraammss) is
       set to false then slave tasks are not signaled. If _S_U_S_P_E_N_D___P_E___T_A_S_K_S  is
       true (this is the default when not set as eexxeeccdd__ppaarraamm) then slave tasks
       are signaled with the overridden queue signal / suspend_method.


       If set to ttrruuee (or 11) the job is killed by using the tasks file of  the
       cpuset  subsystem  (which when killing is enabled is automatically used
       for all jobs). As long as there are processes in the file the processes
       are signaled. This prevents any leftover processes from jobs to be run-
       ning after the job finished.

       _m_o_u_n_t

       Tries to mount the cgroup subsystems if it is not  already  mounted  to
       _$_c_g_r_o_u_p___p_a_t_h_/_s_u_b_s_y_s_t_e_m before a cgroup is created. If _$_c_g_r_o_u_p___p_a_t_h does
       not exist an error occurs (it will not tried to  be  created).  If  the
       subsystem directory does not exist it will be created. The subsystem is
       not unmounted by Grid Engine. Usually the mounting  is  done  automati-
       cally  by the operating system when it is started, so this parameter is
       usually turned off. Typically (like in RHEL 6) the  configuration  file
       for OS auto-mounting of cgroups is _/_e_t_c_/_c_g_c_o_n_f_i_g_._c_o_n_f.

       _f_o_r_c_e_d___n_u_m_a

       When  memory  binding  was  requested with --mmbbiinndd ccoorreess::ssttrriicctt, so that
       only memory from the NUMA node the job is bound to (by using  --bbiinnddiinngg)
       should  be taken, then this is set in the cgroups settings _c_p_u_s_e_t_._m_e_m_s.
       If turned on by setting ffoorrcceedd__nnuummaa to 11 or ttrruuee  then  this  limit  is
       ensured  by  the  Linux kernel. In difference to the traditional memory
       enforcement the job can not reset the value in order to get memory from
       other NUMA nodes.

   rreeppoorrttiinngg__ppaarraammss
       Used  to  define  the  behavior  of reporting modules in the Univa Grid
       Engine qmaster. Changes to the rreeppoorrttiinngg__ppaarraammss takes immediate effect.
       The following values are recognized:

       _a_c_c_o_u_n_t_i_n_g
              If  this  parameter is set to true, the accounting file is writ-
              ten.  The accounting file is prerequisite for  using  the  qqaacccctt
              command.


       _r_e_p_o_r_t_i_n_g
              If this parameter is set to true, the reporting file is written.
              The reporting file contains data that can be used for monitoring
              and  analysis,  like job accounting, job log, host load and con-
              sumables, queue status and consumables and sharetree  configura-
              tion  and  usage.   Attention: Depending on the size and load of
              the cluster, the reporting file can  become  quite  large.  Only
              activate  the  reporting file if you have a process running that
              will consume the reporting file!  See _r_e_p_o_r_t_i_n_g(5)  for  further
              information about format and contents of the reporting file.


       _f_l_u_s_h___t_i_m_e
              Contents  of  the  reporting file are buffered in the Univa Grid
              Engine qmaster and flushed at a fixed interval.   This  interval
              can  be  configured with the _f_l_u_s_h___t_i_m_e parameter.  It is speci-
              fied as a time value in the format  HH:MM:SS.   Sensible  values
              range  from  a few seconds to one minute. Setting it too low may
              slow down the qmaster. Setting it too high will make the qmaster
              consume large amounts of memory for buffering data.


       _a_c_c_o_u_n_t_i_n_g___f_l_u_s_h___t_i_m_e
              Contents  of  the accounting file are buffered in the Univa Grid
              Engine qmaster and flushed at a fixed interval.   This  interval
              can  be configured with the _a_c_c_o_u_n_t_i_n_g___f_l_u_s_h___t_i_m_e parameter.  It
              is specified as a time value in the format  HH:MM:SS.   Sensible
              values  range  from  a few seconds to one minute. Setting it too
              low may slow down the qmaster. Setting it too high will make the
              qmaster  consume  large  amounts  of  memory for buffering data.
              Setting it to 00:00:00 will disable accounting  data  buffering;
              as soon as data is generated, it will be written to the account-
              ing file.  If this parameter is not  set,  the  accounting  data
              flush  interval  will  default  to  the  value of the _f_l_u_s_h___t_i_m_e
              parameter.


       _j_o_b_l_o_g If this parameter is set to true, the reporting file  will  con-
              tain job logging information. See _r_e_p_o_r_t_i_n_g(5) for more informa-
              tion about job logging.


       _s_h_a_r_e_l_o_g
              The Univa Grid Engine qmaster can dump information about  share-
              tree configuration and use to the reporting file.  The parameter
              _s_h_a_r_e_l_o_g sets an interval in which sharetree information will be
              dumped.   It  is set in the format HH:MM:SS. A value of 00:00:00
              configures qmaster not to dump sharetree information.  Intervals
              of  several  minutes  up  to  hours are sensible values for this
              parameter.   See  _r_e_p_o_r_t_i_n_g(5)  for  further  information  about
              sharelog.


       _o_n_l_i_n_e___u_s_a_g_e
              Online  usage  information of running jobs (e.g. cpu, mem, vmem,
              ...) can be written to the _r_e_p_o_r_t_i_n_g(5) file.   Which  variables
              to  report  is  configured  as  a  colon  separated  list,  e.g.
              _o_n_l_i_n_e___u_s_a_g_e_=_c_p_u_:_m_e_m_:_v_m_e_m.


   ffiinniisshheedd__jjoobbss
       NNoottee:: Deprecated, may be removed in future release.
       Univa Grid Engine stores a certain number of _j_u_s_t _f_i_n_i_s_h_e_d jobs to pro-
       vide  post  mortem  status  information.  The  ffiinniisshheedd__jjoobbss  parameter
       defines the number of finished jobs stored. If this maximum  number  is
       reached,  the  eldest  finished job will be discarded for every new job
       added to the finished job list.

       Changing ffiinniisshheedd__jjoobbss will take immediate  effect.   The  default  for
       ffiinniisshheedd__jjoobbss is 100.

       This value is a global configuration parameter only. It cannot be over-
       written by the execution host local configuration.

   qqllooggiinn__ddaaeemmoonn
       This parameter specifies the mechanism that is to  be  started  on  the
       server  side of a _q_l_o_g_i_n(1) request. Usually this is the builtin mecha-
       nism. It's also possible to configure an external executable by  speci-
       fying  the full qualified pathname, e.g. of the system's telnet daemon.

       Changing qqllooggiinn__ddaaeemmoonn will take immediate effect.  The  default  value
       for qqllooggiinn__ddaaeemmoonn is builtin.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

       Examples for the two allowed kinds of attributes are:
       qlogin_daemon    builtin
       or
       qlogin_daemon    /usr/sbin/in.telnetd

   qqllooggiinn__ccoommmmaanndd
       This is the command to be executed on the client side  of  a  _q_l_o_g_i_n(1)
       request.  Usually this is the builtin qlogin mechanism.  It's also pos-
       sible to configure an external mechanism, usually the absolute pathname
       of the system's telnet client program. It is automatically started with
       the target host and port number as parameters.

       Changing qqllooggiinn__ccoommmmaanndd will take immediate effect.  The default  value
       for qqllooggiinn__ccoommmmaanndd is builtin.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

       Examples for the two allowed kinds of attributes are:
       qlogin_command   builtin
       or
       qlogin_command   /usr/bin/telnetd

   rrllooggiinn__ddaaeemmoonn
       This parameter specifies the mechanism that is to  be  started  on  the
       server  side of a _q_r_s_h(1) request wwiitthhoouutt a command argument to be exe-
       cuted remotely.  Usually this is the builtin mechanism. It's also  pos-
       sible  to  configure  an external executable by specifying the absolute
       pathname, e.g. of the system's rlogin daemon.

       Changing rrllooggiinn__ddaaeemmoonn will take  immediate  effect.  The  default  for
       rrllooggiinn__ddaaeemmoonn is builtin.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

       The allowed values are similar to the ones  of  the  examples  of  qqlloo--
       ggiinn__ddaaeemmoonn..

   rrllooggiinn__ccoommmmaanndd
       This  is  the  mechanism to be executed on the client side of a _q_r_s_h(1)
       request wwiitthhoouutt a command argument to be  executed  remotely.   Usually
       this  is  the  builtin  mechanism.  If no value is given, a specialized
       Univa Grid Engine component is  used.   The  command  is  automatically
       started  with the target host and port number as parameters.  The Univa
       Grid Engine rlogin client has been extended to accept and use the  port
       number  argument.  You  can  only  use clients, such as _s_s_h, which also
       understand this syntax.

       Changing rrllooggiinn__ccoommmmaanndd will take immediate effect. The  default  value
       for rrllooggiinn__ccoommmmaanndd is builtin.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

       In addition to the examples of qqllooggiinn__ccoommmmaanndd , this value is allowed:
       rsh_daemon      none

   rrsshh__ddaaeemmoonn
       This parameter specifies the mechanism that is to  be  started  on  the
       server side of a _q_r_s_h(1) request wwiitthh a command argument to be executed
       remotely.  Usually this is the builtin mechanism. If no value is given,
       a specialized Univa Grid Engine component is used.

       Changing  rrsshh__ddaaeemmoonn  will take immediate effect. The default value for
       rrsshh__ddaaeemmoonn is builtin.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

       In addition to the examples of qqllooggiinn__ddaaeemmoonn , this value is allowed:
       rsh_daemon      none

   rrsshh__ccoommmmaanndd
       This  is  the  mechanism to be executed on the client side of a _q_r_s_h(1)
       request wwiitthh a command argument to be executed remotely.  Usually  this
       is  the  builtin  mechanism.  If no value is given, a specialized Univa
       Grid Engine component is used. The  command  is  automatically  started
       with  the  target  host and port number as parameters like required for
       _t_e_l_n_e_t(1) plus the command with its arguments to be executed  remotely.
       The  Univa  Grid  Engine rsh client has been extended to accept and use
       the port number argument. You can only use clients, such as _s_s_h,  which
       also understand this syntax.

       Changing  rrsshh__ccoommmmaanndd will take immediate effect. The default value for
       rrsshh__ccoommmmaanndd is builtin.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

       In addition to the examples of qqllooggiinn__ccoommmmaanndd , this value is allowed:
       rsh_command     none

   ddeelleeggaatteedd__ffiillee__ssttaaggiinngg
       This  flag  must  be set to "true" when the prolog and epilog are ready
       for delegated file staging, so that the DRMAA  attribute  'drmaa_trans-
       fer_files'  is  supported. To establish delegated file staging, use the
       variables beginning with "$fs_..." in prolog and  epilog  to  move  the
       input,  output  and  error files from one host to the other.  When this
       flag is set to "false", no file staging  is  available  for  the  DRMAA
       interface.  File  staging  is  currently implemented only via the DRMAA
       interface.  When an error occurs while moving  the  input,  output  and
       error files, return error code 100 so that the error handling mechanism
       can handle the error correctly. (See also FORBID_APPERROR).

   rreepprriioorriittiizzee
       NNoottee:: Deprecated, may be removed in future release.
       This flag enables or disables the reprioritization  of  jobs  based  on
       their  ticket  amount. The rreepprriioorriittiizzee__iinntteerrvvaall in _s_c_h_e_d___c_o_n_f(5) takes
       effect only if rreepprriioorriittiizzee is set to true. To turn off job reprioriti-
       zation,  the  rreepprriioorriittiizzee  flag must be set to false and the rreepprriioorrii--
       ttiizzee__iinntteerrvvaall to 0 which is the default.

       This value is a global configuration parameter only. It cannot be over-
       ridden by the execution host local configuration.

   jjssvv__uurrll
       This  setting  defines  a server JSV instance which will be started and
       triggered by the _s_g_e___q_m_a_s_t_e_r(8) process. This JSV instance will be used
       to  verify  job  specifications  of  jobs  before they are accepted and
       stored in the internal master database.  The global configuration entry
       for this value cannot be overwritten by execution host local configura-
       tions.

       Find more details concerning JSV in _j_s_v(1) and _s_g_e___r_e_q_u_e_s_t(1).

       The syntax of the jjssvv__uurrll is specified in _s_g_e___t_y_p_e_s(1).

   jjssvv__aalllloowweedd__mmoodd
       If there is a server JSV script defined with  jjssvv__uurrll  parameter,  then
       all _q_a_l_t_e_r(1) or _q_m_o_n(1) modification requests for jobs are rejected by
       qmaster. With the jjssvv__aalllloowweedd__mmoodd parameter an  administrator  has  the
       possibility  to  allow  a  set  of switches which can then be used with
       clients to modify certain job attributes. The value for this  parameter
       has to be a comma separated list of JSV job parameter names as they are
       documented in _q_s_u_b(1) or the value nnoonnee to indicate that  no  modifica-
       tion should be allowed.  Please note that even if nnoonnee is specified the
       switches --ww and --tt are allowed for qalter.

   lliibbjjvvmm__ppaatthh
       lliibbjjvvmm__ppaatthh is usually set during qmaster installation  and  points  to
       the  absolute path of libjvm.so.  (or the corresponding library depend-
       ing on  your  architecture  -  e.g.  /usr/java/jre/lib/i386/server/lib-
       jvm.so)  The  referenced  libjvm  version  must be at least 1.5.  It is
       needed by the JVM qmaster thread only. If the Java VM needs  additional
       starting  parameters they can be set in aaddddiittiioonnaall__jjvvmm__aarrggss. If the JVM
       thread is started at all can be defined in the  _b_o_o_t_s_t_r_a_p(5)  file.  If
       libjvm_path  is  empty  or  an  incorrect  path the JVM thread fails to
       start.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

   aaddddiittiioonnaall__jjvvmm__aarrggss
       aaddddiittiioonnaall__jjvvmm__aarrggss   is   usually  set  during  qmaster  installation.
       Details about possible values aaddddiittiioonnaall__jjvvmm__aarrggss can be found  in  the
       help  output of the accompanying Java command. This setting is normally
       not needed.

       The global configuration entry for this value may be overwritten by the
       execution host local configuration.

SSEEEE AALLSSOO
       _s_g_e___i_n_t_r_o(1),  _c_s_h(1), _q_c_o_n_f(1), _q_s_u_b(1), _j_s_v(1), _r_s_h(1), _s_h(1), _g_e_t_p_w_-
       _n_a_m(3),     _d_r_m_a_a___a_t_t_r_i_b_u_t_e_s(3),     _q_u_e_u_e___c_o_n_f(5),      _s_c_h_e_d___c_o_n_f(5),
       _s_g_e___t_y_p_e_s(1),  _s_g_e___e_x_e_c_d(8), _s_g_e___q_m_a_s_t_e_r(8), _s_g_e___s_h_e_p_h_e_r_d(8), _s_g_e___d_i_a_g_-
       _n_o_s_t_i_c_s(1), _c_r_o_n(8), _U_n_i_v_a _G_r_i_d _E_n_g_i_n_e _I_n_s_t_a_l_l_a_t_i_o_n _a_n_d  _A_d_m_i_n_i_s_t_r_a_t_i_o_n
       _G_u_i_d_e_.

CCOOPPYYRRIIGGHHTT
       See _s_g_e___i_n_t_r_o(1) for a full statement of rights and permissions.



Univa Grid Engine File Formats     UGE 8.4.4                       SGE_CONF(5)
